export_library
{
    sdl_audio_format :: enum c_int
    {
        SDL_AUDIO_UNKNOWN   = 0x0000;   
        SDL_AUDIO_U8        = 0x0008;   
        SDL_AUDIO_S8        = 0x8008;   
        SDL_AUDIO_S16LE     = 0x8010;   
        SDL_AUDIO_S16BE     = 0x9010;   
        SDL_AUDIO_S32LE     = 0x8020;   
        SDL_AUDIO_S32BE     = 0x9020;   
        SDL_AUDIO_F32LE     = 0x8120;   
        SDL_AUDIO_F32BE     = 0x9120;   
         
        #if ENDIAN_LITTLE
        SDL_AUDIO_S16 = SDL_AUDIO_S16LE;
        SDL_AUDIO_S32 = SDL_AUDIO_S32LE;
        SDL_AUDIO_F32 = SDL_AUDIO_F32LE;
        #else
        SDL_AUDIO_S16 = SDL_AUDIO_S16BE;
        SDL_AUDIO_S32 = SDL_AUDIO_S32BE;
        SDL_AUDIO_F32 = SDL_AUDIO_F32BE;
        #end
    } 

    sdl_audio_device_id :: type_alias = u32;

    SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK  :: define sdl_audio_device_id = 0xFFFFFFFF;
    SDL_AUDIO_DEVICE_DEFAULT_RECORDING :: define sdl_audio_device_id = 0xFFFFFFFE;

    sdl_audio_spec :: struct
    {
        format   : sdl_audio_format;
        channels : c_int;
        freq     : c_int;
    } 

    sdl_audio_stream :: type_opaque;

    sdl_get_num_audio_drivers        :: fn () -> c_int                                                                           = extern "SDL_GetNumAudioDrivers";
    sdl_get_audio_driver             :: fn (index: c_int) -> c_char&                                                             = extern "SDL_GetAudioDriver";
    sdl_get_current_audio_driver     :: fn () -> c_char&                                                                         = extern "SDL_GetCurrentAudioDriver";
    sdl_get_audio_playback_devices   :: fn (count: c_int&) -> sdl_audio_device_id&                                               = extern "SDL_GetAudioPlaybackDevices";
    sdl_get_audio_recording_devices  :: fn (count: c_int&) -> sdl_audio_device_id&                                               = extern "SDL_GetAudioRecordingDevices";
    sdl_get_audio_device_name        :: fn (devid: sdl_audio_device_id) -> c_char&                                               = extern "SDL_GetAudioDeviceName";
    sdl_get_audio_device_format      :: fn (devid: sdl_audio_device_id, spec: sdl_audio_spec&, sample_frames: c_int&) -> bool    = extern "SDL_GetAudioDeviceFormat";

    sdl_get_audio_device_channel_map :: fn (devid: sdl_audio_device_id, count: c_int&) -> c_int&                                 = extern "SDL_GetAudioDeviceChannelMap";
    sdl_open_audio_device            :: fn (devid: sdl_audio_device_id, spec: sdl_audio_spec&) -> sdl_audio_device_id            = extern "SDL_OpenAudioDevice";
    sdl_pause_audio_device           :: fn (dev: sdl_audio_device_id) -> bool                                                    = extern "SDL_PauseAudioDevice";
    sdl_resume_audio_device          :: fn (dev: sdl_audio_device_id) -> bool                                                    = extern "SDL_ResumeAudioDevice";
    sdl_audio_device_paused          :: fn (dev: sdl_audio_device_id) -> bool                                                    = extern "SDL_AudioDevicePaused";
    sdl_get_audio_device_gain        :: fn (devid: sdl_audio_device_id) -> f32                                                   = extern "SDL_GetAudioDeviceGain";
    sdl_set_audio_device_gain        :: fn (devid: sdl_audio_device_id, gain: f32) -> bool                                       = extern "SDL_SetAudioDeviceGain";
    sdl_close_audio_device           :: fn (devid: sdl_audio_device_id)                                                          = extern "SDL_CloseAudioDevice";
    sdl_bind_audio_streams           :: fn (devid: sdl_audio_device_id, streams: sdl_audio_stream&&, num_streams: c_int) -> bool = extern "SDL_BindAudioStreams";
    sdl_bind_audio_stream            :: fn (devid: sdl_audio_device_id, stream: sdl_audio_stream&) -> bool                       = extern "SDL_BindAudioStream";
    sdl_unbind_audio_streams         :: fn (streams: sdl_audio_stream&&, num_streams: c_int)                                     = extern "SDL_UnbindAudioStreams";
    sdl_unbind_audio_stream          :: fn (stream: sdl_audio_stream&)                                                           = extern "SDL_UnbindAudioStream";


    sdl_get_audio_stream_device           :: fn (stream: sdl_audio_stream&) -> sdl_audio_device_id                                          = extern "SDL_GetAudioStreamDevice";

    sdl_create_audio_stream                 :: fn (src_spec: sdl_audio_spec&, dst_spec: sdl_audio_spec&) -> sdl_audio_stream&               = extern "SDL_CreateAudioStream";
    sdl_get_audio_stream_properties         :: fn (stream: sdl_audio_stream&) -> sdl_properties_id                                          = extern "SDL_GetAudioStreamProperties";
    sdl_get_audio_stream_format             :: fn (stream: sdl_audio_stream&, src_spec: sdl_audio_spec&, dst_spec: sdl_audio_spec&) -> bool = extern "SDL_GetAudioStreamFormat";
    sdl_set_audio_stream_format             :: fn (stream: sdl_audio_stream&, src_spec: sdl_audio_spec&, dst_spec: sdl_audio_spec&) -> bool = extern "SDL_SetAudioStreamFormat";
    sdl_get_audio_stream_frequencyratio     :: fn (stream: sdl_audio_stream&) -> f32                                                        = extern "SDL_GetAudioStreamFrequencyRatio";
    sdl_set_audio_stream_frequencyratio     :: fn (stream: sdl_audio_stream&, ratio: f32) -> bool                                           = extern "SDL_SetAudioStreamFrequencyRatio";
    sdl_get_audio_stream_gain               :: fn (stream: sdl_audio_stream&) -> f32                                                        = extern "SDL_GetAudioStreamGain";
    sdl_set_audio_stream_gain               :: fn (stream: sdl_audio_stream&, gain: f32) -> bool                                            = extern "SDL_SetAudioStreamGain";
    sdl_get_audio_stream_input_channel_map  :: fn (stream: sdl_audio_stream&, count: c_int&) -> c_int&                                      = extern "SDL_GetAudioStreamInputChannelMap";
    sdl_get_audio_stream_output_channel_map :: fn (stream: sdl_audio_stream&, count: c_int&) -> c_int&                                      = extern "SDL_GetAudioStreamOutputChannelMap";
    sdl_set_audio_stream_input_channel_map  :: fn (stream: sdl_audio_stream&, chmap: c_int&, count: c_int) -> bool                          = extern "SDL_SetAudioStreamInputChannelMap";
    sdl_set_audio_stream_output_channel_map :: fn (stream: sdl_audio_stream&, chmap: c_int&, count: c_int) -> bool                          = extern "SDL_SetAudioStreamOutputChannelMap";
    sdl_put_audio_stream_data               :: fn (stream: sdl_audio_stream&, buf: void&, len: c_int) -> bool                               = extern "SDL_PutAudioStreamData";
    sdl_get_audio_stream_data               :: fn (stream: sdl_audio_stream&, buf: void&, len: c_int) -> c_int                              = extern "SDL_GetAudioStreamData";
    sdl_get_audio_stream_available          :: fn (stream: sdl_audio_stream&) -> c_int                                                      = extern "SDL_GetAudioStreamAvailable";
    sdl_get_audio_stream_queued             :: fn (stream: sdl_audio_stream&) -> c_int                                                      = extern "SDL_GetAudioStreamQueued";
    sdl_flush_audio_stream                  :: fn (stream: sdl_audio_stream&) -> bool                                                       = extern "SDL_FlushAudioStream";
    sdl_clear_audio_stream                  :: fn (stream: sdl_audio_stream&) -> bool                                                       = extern "SDL_ClearAudioStream";
    sdl_pause_audio_stream_device           :: fn (stream: sdl_audio_stream&) -> bool                                                       = extern "SDL_PauseAudioStreamDevice";
    sdl_resume_audio_stream_device          :: fn (stream: sdl_audio_stream&) -> bool                                                       = extern "SDL_ResumeAudioStreamDevice";
    sdl_lock_audio_stream                   :: fn (stream: sdl_audio_stream&) -> bool                                                       = extern "SDL_LockAudioStream";
    sdl_unlock_audio_stream                 :: fn (stream: sdl_audio_stream&) -> bool                                                       = extern "SDL_UnlockAudioStream";

    sdl_set_audio_stream_get_callback :: fn (stream: sdl_audio_stream&, callback: sdl_audio_stream_callback&, userdata: void&) -> bool  = extern "SDL_SetAudioStreamGetCallback";
    sdl_set_audio_stream_put_callback :: fn (stream: sdl_audio_stream&, callback: sdl_audio_stream_callback&, userdata: void&) -> bool  = extern "SDL_SetAudioStreamPutCallback";
    sdl_destroy_audio_stream          :: fn (stream: sdl_audio_stream&)                                                                 = extern "SDL_DestroyAudioStream";

    sdl_open_audio_device_stream   :: fn (devid: sdl_audio_device_id, spec: sdl_audio_spec&, callback: sdl_audio_stream_callback&, userdata: void&) -> sdl_audio_stream& = extern "SDL_OpenAudioDeviceStream";
    sdl_set_audio_postmix_callback :: fn (devid: sdl_audio_device_id, callback: sdl_audio_postmix_callback&, userdata: void&) -> bool                                    = extern "SDL_SetAudioPostmixCallback";
    sdl_load_wav_io                :: fn (src: sdl_io_stream&, closeio: bool, spec: sdl_audio_spec&, audio_buf: u8&&, audio_len: u32&) -> bool                           = extern "SDL_LoadWAV_IO";
    sdl_load_wav                   :: fn (path: c_char&, spec: sdl_audio_spec&, audio_buf: u8&&, audio_len: u32&) -> bool                                                = extern "SDL_LoadWAV";
    sdl_mix_audio                  :: fn (dst: u8&, src: u8&, format: sdl_audio_format, len: u32, volume: f32) -> bool                                                   = extern "SDL_MixAudio";

    sdl_convert_audio_samples        :: fn (src_spec: sdl_audio_spec&, src_data: u8&, src_len: c_int, dst_spec: sdl_audio_spec&, dst_data: u8&&, dst_len: c_int&) -> bool = extern "SDL_ConvertAudioSamples";
    sdl_get_audio_format_name        :: fn (format: sdl_audio_format) -> c_char&                                                                                          = extern "SDL_GetAudioFormatName";
    sdl_get_silence_value_for_format :: fn (format: sdl_audio_format) -> c_int                                                                                            = extern "SDL_GetSilenceValueForFormat";

    sdl_audio_stream_callback  :: type_alias = fn (userdata: void&, stream: sdl_audio_stream&, additional_amount: c_int, total_amount: c_int);
    sdl_audio_postmix_callback :: type_alias = fn (userdata: void&, spec: sdl_audio_spec&, buffer: f32&, buflen: c_int);
         
    //#define SDL_AUDIO_MASK_BITSIZE       0xFFu
    //#define SDL_AUDIO_MASK_FLOAT         1u<<8
    //#define SDL_AUDIO_MASK_BIG_ENDIAN    1u<<12
    //#define SDL_AUDIO_MASK_SIGNED        1u<<15
    //
    //#define SDL_DEFINE_AUDIO_FORMAT(signed, bigendian, float, size) \
    //    (((Uint16)(signed) << 15) | ((Uint16)(bigendian) << 12) | ((Uint16)(float) << 8) | ((size) & SDL_AUDIO_MASK_BITSIZE))

    //#define SDL_AUDIO_FRAMESIZE(x) (SDL_AUDIO_BYTESIZE((x).format) * (x).channels)

    //#define SDL_AUDIO_BITSIZE(x)         ((x) & SDL_AUDIO_MASK_BITSIZE)
    //#define SDL_AUDIO_BYTESIZE(x)        (SDL_AUDIO_BITSIZE(x) / 8)
    //#define SDL_AUDIO_ISFLOAT(x)         ((x) & SDL_AUDIO_MASK_FLOAT)
    //#define SDL_AUDIO_ISBIGENDIAN(x)     ((x) & SDL_AUDIO_MASK_BIG_ENDIAN)
    //#define SDL_AUDIO_ISLITTLEENDIAN(x)  (!SDL_AUDIO_ISBIGENDIAN(x))
    //#define SDL_AUDIO_ISSIGNED(x)        ((x) & SDL_AUDIO_MASK_SIGNED)
    //#define SDL_AUDIO_ISINT(x)           (!SDL_AUDIO_ISFLOAT(x))
    //#define SDL_AUDIO_ISUNSIGNED(x)      (!SDL_AUDIO_ISSIGNED(x))

}

import
{
    "sdl3/sdl_properties";
    "sdl3/sdl_iostream";
}
