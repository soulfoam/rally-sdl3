export_library
{
	sdl_malloc :: fn (size: usize) -> void& = extern "SDL_malloc";
	sdl_calloc :: fn (nmemb: usize, size: usize) -> void& = extern "SDL_calloc";
	sdl_realloc :: fn (mem: void&, size: usize) -> void& = extern "SDL_realloc";
	sdl_free :: fn (mem: void&) = extern "SDL_free";
	sdl_get_original_memory_functions :: fn (malloc_func: sdl_malloc_func_fn&, calloc_func: sdl_calloc_func_fn&, realloc_func: sdl_realloc_func_fn&, free_func: sdl_free_func_fn&) = extern "SDL_GetOriginalMemoryFunctions";
	sdl_get_memory_functions :: fn (malloc_func: sdl_malloc_func_fn&, calloc_func: sdl_calloc_func_fn&, realloc_func: sdl_realloc_func_fn&, free_func: sdl_free_func_fn&) = extern "SDL_GetMemoryFunctions";
	sdl_set_memory_functions :: fn (malloc_func: sdl_malloc_func_fn&, calloc_func: sdl_calloc_func_fn&, realloc_func: sdl_realloc_func_fn&, free_func: sdl_free_func_fn&) -> bool = extern "SDL_SetMemoryFunctions";
	sdl_aligned_alloc :: fn (alignment: usize, size: usize) -> void& = extern "SDL_aligned_alloc";
	sdl_aligned_free :: fn (mem: void&) = extern "SDL_aligned_free";
	sdl_get_num_allocations :: fn () -> c_int = extern "SDL_GetNumAllocations";
	sdl_get_environment :: fn () -> sdl_environment& = extern "SDL_GetEnvironment";
	sdl_create_environment :: fn (populated: bool) -> sdl_environment& = extern "SDL_CreateEnvironment";
	sdl_get_environment_variable :: fn (env: sdl_environment&, name: c_char&) -> c_char& = extern "SDL_GetEnvironmentVariable";
	sdl_get_environment_variables :: fn (env: sdl_environment&) -> c_char&& = extern "SDL_GetEnvironmentVariables";
	sdl_set_environment_variable :: fn (env: sdl_environment&, name: c_char&, value: c_char&, overwrite: bool) -> bool = extern "SDL_SetEnvironmentVariable";
	sdl_unset_environment_variable :: fn (env: sdl_environment&, name: c_char&) -> bool = extern "SDL_UnsetEnvironmentVariable";
	sdl_destroy_environment :: fn (env: sdl_environment&) = extern "SDL_DestroyEnvironment";
	sdl_getenv :: fn (name: c_char&) -> c_char& = extern "SDL_getenv";
	sdl_getenv_unsafe :: fn (name: c_char&) -> c_char& = extern "SDL_getenv_unsafe";
	sdl_setenv_unsafe :: fn (name: c_char&, value: c_char&, overwrite: c_int) -> c_int = extern "SDL_setenv_unsafe";
	sdl_unsetenv_unsafe :: fn (name: c_char&) -> c_int = extern "SDL_unsetenv_unsafe";
	sdl_qsort :: fn (base: void&, nmemb: usize, size: usize, compare: sdl_compare_callback_fn&) = extern "SDL_qsort";
	sdl_bsearch :: fn (key: void&, base: void&, nmemb: usize, size: usize, compare: sdl_compare_callback_fn&) -> void& = extern "SDL_bsearch";
	sdl_qsort_r :: fn (base: void&, nmemb: usize, size: usize, compare: sdl_compare_callback_r_fn&, userdata: void&) = extern "SDL_qsort_r";
	sdl_bsearch_r :: fn (key: void&, base: void&, nmemb: usize, size: usize, compare: sdl_compare_callback_r_fn&, userdata: void&) -> void& = extern "SDL_bsearch_r";
	sdl_abs :: fn (x: c_int) -> c_int = extern "SDL_abs";
	sdl_isalpha :: fn (x: c_int) -> c_int = extern "SDL_isalpha";
	sdl_isalnum :: fn (x: c_int) -> c_int = extern "SDL_isalnum";
	sdl_isblank :: fn (x: c_int) -> c_int = extern "SDL_isblank";
	sdl_iscntrl :: fn (x: c_int) -> c_int = extern "SDL_iscntrl";
	sdl_isdigit :: fn (x: c_int) -> c_int = extern "SDL_isdigit";
	sdl_isxdigit :: fn (x: c_int) -> c_int = extern "SDL_isxdigit";
	sdl_ispunct :: fn (x: c_int) -> c_int = extern "SDL_ispunct";
	sdl_isspace :: fn (x: c_int) -> c_int = extern "SDL_isspace";
	sdl_isupper :: fn (x: c_int) -> c_int = extern "SDL_isupper";
	sdl_islower :: fn (x: c_int) -> c_int = extern "SDL_islower";
	sdl_isprint :: fn (x: c_int) -> c_int = extern "SDL_isprint";
	sdl_isgraph :: fn (x: c_int) -> c_int = extern "SDL_isgraph";
	sdl_toupper :: fn (x: c_int) -> c_int = extern "SDL_toupper";
	sdl_tolower :: fn (x: c_int) -> c_int = extern "SDL_tolower";
	sdl_crc16 :: fn (crc: u16, data: void&, len: usize) -> u16 = extern "SDL_crc16";
	sdl_crc32 :: fn (crc: u32, data: void&, len: usize) -> u32 = extern "SDL_crc32";
	sdl_murmur3_32 :: fn (data: void&, len: usize, seed: u32) -> u32 = extern "SDL_murmur3_32";
	sdl_memcpy :: fn (dst: void&, src: void&, len: usize) -> void& = extern "SDL_memcpy";
	sdl_memmove :: fn (dst: void&, src: void&, len: usize) -> void& = extern "SDL_memmove";
	sdl_memset :: fn (dst: void&, c: c_int, len: usize) -> void& = extern "SDL_memset";
	sdl_memset4 :: fn (dst: void&, val: u32, dwords: usize) -> void& = extern "SDL_memset4";
	sdl_memcmp :: fn (s1: void&, s2: void&, len: usize) -> c_int = extern "SDL_memcmp";
	//sdl_wcslen :: fn (wstr: wchar_t&) -> usize = extern "SDL_wcslen";
	//sdl_wcsnlen :: fn (wstr: wchar_t&, maxlen: usize) -> usize = extern "SDL_wcsnlen";
	//sdl_wcslcpy :: fn (dst: wchar_t&, src: wchar_t&, maxlen: usize) -> usize = extern "SDL_wcslcpy";
	//sdl_wcslcat :: fn (dst: wchar_t&, src: wchar_t&, maxlen: usize) -> usize = extern "SDL_wcslcat";
	//sdl_wcsdup :: fn (wstr: wchar_t&) -> wchar_t& = extern "SDL_wcsdup";
	//sdl_wcsstr :: fn (haystack: wchar_t&, needle: wchar_t&) -> wchar_t& = extern "SDL_wcsstr";
	//sdl_wcsnstr :: fn (haystack: wchar_t&, needle: wchar_t&, maxlen: usize) -> wchar_t& = extern "SDL_wcsnstr";
	//sdl_wcscmp :: fn (str1: wchar_t&, str2: wchar_t&) -> c_int = extern "SDL_wcscmp";
	//sdl_wcsncmp :: fn (str1: wchar_t&, str2: wchar_t&, maxlen: usize) -> c_int = extern "SDL_wcsncmp";
	//sdl_wcscasecmp :: fn (str1: wchar_t&, str2: wchar_t&) -> c_int = extern "SDL_wcscasecmp";
	//sdl_wcsncasecmp :: fn (str1: wchar_t&, str2: wchar_t&, maxlen: usize) -> c_int = extern "SDL_wcsncasecmp";
	//sdl_wcstol :: fn (str: wchar_t&, endp: wchar_t&&, base: c_int) -> c_long = extern "SDL_wcstol";
	sdl_strlen :: fn (str: c_char&) -> usize = extern "SDL_strlen";
	sdl_strnlen :: fn (str: c_char&, maxlen: usize) -> usize = extern "SDL_strnlen";
	sdl_strlcpy :: fn (dst: c_char&, src: c_char&, maxlen: usize) -> usize = extern "SDL_strlcpy";
	sdl_utf8strlcpy :: fn (dst: c_char&, src: c_char&, dst_bytes: usize) -> usize = extern "SDL_utf8strlcpy";
	sdl_strlcat :: fn (dst: c_char&, src: c_char&, maxlen: usize) -> usize = extern "SDL_strlcat";
	sdl_strdup :: fn (str: c_char&) -> c_char& = extern "SDL_strdup";
	sdl_strndup :: fn (str: c_char&, maxlen: usize) -> c_char& = extern "SDL_strndup";
	sdl_strrev :: fn (str: c_char&) -> c_char& = extern "SDL_strrev";
	sdl_strupr :: fn (str: c_char&) -> c_char& = extern "SDL_strupr";
	sdl_strlwr :: fn (str: c_char&) -> c_char& = extern "SDL_strlwr";
	sdl_strchr :: fn (str: c_char&, c: c_int) -> c_char& = extern "SDL_strchr";
	sdl_strrchr :: fn (str: c_char&, c: c_int) -> c_char& = extern "SDL_strrchr";
	sdl_strstr :: fn (haystack: c_char&, needle: c_char&) -> c_char& = extern "SDL_strstr";
	sdl_strnstr :: fn (haystack: c_char&, needle: c_char&, maxlen: usize) -> c_char& = extern "SDL_strnstr";
	sdl_strcasestr :: fn (haystack: c_char&, needle: c_char&) -> c_char& = extern "SDL_strcasestr";
	sdl_strtok_r :: fn (s1: c_char&, s2: c_char&, saveptr: c_char&&) -> c_char& = extern "SDL_strtok_r";
	sdl_utf8strlen :: fn (str: c_char&) -> usize = extern "SDL_utf8strlen";
	sdl_utf8strnlen :: fn (str: c_char&, bytes: usize) -> usize = extern "SDL_utf8strnlen";
	sdl_itoa :: fn (value: c_int, str: c_char&, radix: c_int) -> c_char& = extern "SDL_itoa";
	//sdl_uitoa :: fn (int: unsigned, param1: value, str: c_char&, radix: c_int) -> c_char& = extern "SDL_uitoa";
	sdl_ltoa :: fn (value: c_long, str: c_char&, radix: c_int) -> c_char& = extern "SDL_ltoa";
	//sdl_ultoa :: fn (long: unsigned, param1: value, str: c_char&, radix: c_int) -> c_char& = extern "SDL_ultoa";
	//sdl_lltoa :: fn (long: c_long, param1: value, str: c_char&, radix: c_int) -> c_char& = extern "SDL_lltoa";
	//sdl_ulltoa :: fn (long: unsigned, value: c_long, str: c_char&, radix: c_int) -> c_char& = extern "SDL_ulltoa";
	sdl_atoi :: fn (str: c_char&) -> c_int = extern "SDL_atoi";
	sdl_atof :: fn (str: c_char&) -> f64 = extern "SDL_atof";
	sdl_strtol :: fn (str: c_char&, endp: c_char&&, base: c_int) -> c_long = extern "SDL_strtol";
	sdl_strtoull :: fn (str: c_char&, endp: c_char&&, base: c_int) -> c_long = extern "SDL_strtoull";
	sdl_strtod :: fn (str: c_char&, endp: c_char&&) -> f64 = extern "SDL_strtod";
	sdl_strcmp :: fn (str1: c_char&, str2: c_char&) -> c_int = extern "SDL_strcmp";
	sdl_strncmp :: fn (str1: c_char&, str2: c_char&, maxlen: usize) -> c_int = extern "SDL_strncmp";
	sdl_strcasecmp :: fn (str1: c_char&, str2: c_char&) -> c_int = extern "SDL_strcasecmp";
	sdl_strncasecmp :: fn (str1: c_char&, str2: c_char&, maxlen: usize) -> c_int = extern "SDL_strncasecmp";
	sdl_strpbrk :: fn (str: c_char&, breakset: c_char&) -> c_char& = extern "SDL_strpbrk";
	sdl_step_utf8 :: fn (pstr: c_char&&, pslen: usize&) -> u32 = extern "SDL_StepUTF8";
	sdl_step_back_utf8 :: fn (start: c_char&, pstr: c_char&&) -> u32 = extern "SDL_StepBackUTF8";
	sdl_ucs4_to_utf8 :: fn (codepoint: u32, dst: c_char&) -> c_char& = extern "SDL_UCS4ToUTF8";
	sdl_sscanf :: fn (text: c_char&, fmt: c_char&) -> c_int = extern "SDL_sscanf";
	//sdl_vsscanf :: fn (text: c_char&, fmt: c_char&, ap: va_list) -> c_int = extern "SDL_vsscanf";
	//sdl_snprintf :: fn (text: c_char&, maxlen: usize, fmt: c_char&) -> c_int = extern "SDL_snprintf";
	//sdl_swprintf :: fn (text: wchar_t&, maxlen: usize, fmt: wchar_t&) -> c_int = extern "SDL_swprintf";
	//sdl_vsnprintf :: fn (text: c_char&, maxlen: usize, fmt: c_char&, ap: va_list) -> c_int = extern "SDL_vsnprintf";
	//sdl_vswprintf :: fn (text: wchar_t&, maxlen: usize, fmt: wchar_t&, ap: va_list) -> c_int = extern "SDL_vswprintf";
	//sdl_asprintf :: fn (strp: c_char&&, fmt: c_char&) -> c_int = extern "SDL_asprintf";
	//sdl_vasprintf :: fn (strp: c_char&&, fmt: c_char&, ap: va_list) -> c_int = extern "SDL_vasprintf";
	sdl_srand :: fn (seed: u64) = extern "SDL_srand";
	sdl_rand :: fn (n: s32) -> s32 = extern "SDL_rand";
	sdl_randf :: fn () -> f32 = extern "SDL_randf";
	sdl_rand_bits :: fn () -> u32 = extern "SDL_rand_bits";
	sdl_rand_r :: fn (state: u64&, n: s32) -> s32 = extern "SDL_rand_r";
	sdl_randf_r :: fn (state: u64&) -> f32 = extern "SDL_randf_r";
	sdl_rand_bits_r :: fn (state: u64&) -> u32 = extern "SDL_rand_bits_r";
	sdl_acos :: fn (x: f64) -> f64 = extern "SDL_acos";
	sdl_acosf :: fn (x: f32) -> f32 = extern "SDL_acosf";
	sdl_asin :: fn (x: f64) -> f64 = extern "SDL_asin";
	sdl_asinf :: fn (x: f32) -> f32 = extern "SDL_asinf";
	sdl_atan :: fn (x: f64) -> f64 = extern "SDL_atan";
	sdl_atanf :: fn (x: f32) -> f32 = extern "SDL_atanf";
	sdl_atan2 :: fn (y: f64, x: f64) -> f64 = extern "SDL_atan2";
	sdl_atan2f :: fn (y: f32, x: f32) -> f32 = extern "SDL_atan2f";
	sdl_ceil :: fn (x: f64) -> f64 = extern "SDL_ceil";
	sdl_ceilf :: fn (x: f32) -> f32 = extern "SDL_ceilf";
	sdl_copysign :: fn (x: f64, y: f64) -> f64 = extern "SDL_copysign";
	sdl_copysignf :: fn (x: f32, y: f32) -> f32 = extern "SDL_copysignf";
	sdl_cos :: fn (x: f64) -> f64 = extern "SDL_cos";
	sdl_cosf :: fn (x: f32) -> f32 = extern "SDL_cosf";
	sdl_exp :: fn (x: f64) -> f64 = extern "SDL_exp";
	sdl_expf :: fn (x: f32) -> f32 = extern "SDL_expf";
	sdl_fabs :: fn (x: f64) -> f64 = extern "SDL_fabs";
	sdl_fabsf :: fn (x: f32) -> f32 = extern "SDL_fabsf";
	sdl_floor :: fn (x: f64) -> f64 = extern "SDL_floor";
	sdl_floorf :: fn (x: f32) -> f32 = extern "SDL_floorf";
	sdl_trunc :: fn (x: f64) -> f64 = extern "SDL_trunc";
	sdl_truncf :: fn (x: f32) -> f32 = extern "SDL_truncf";
	sdl_fmod :: fn (x: f64, y: f64) -> f64 = extern "SDL_fmod";
	sdl_fmodf :: fn (x: f32, y: f32) -> f32 = extern "SDL_fmodf";
	sdl_isinf :: fn (x: f64) -> c_int = extern "SDL_isinf";
	sdl_isinff :: fn (x: f32) -> c_int = extern "SDL_isinff";
	sdl_isnan :: fn (x: f64) -> c_int = extern "SDL_isnan";
	sdl_isnanf :: fn (x: f32) -> c_int = extern "SDL_isnanf";
	sdl_log :: fn (x: f64) -> f64 = extern "SDL_log";
	sdl_logf :: fn (x: f32) -> f32 = extern "SDL_logf";
	sdl_log10 :: fn (x: f64) -> f64 = extern "SDL_log10";
	sdl_log10f :: fn (x: f32) -> f32 = extern "SDL_log10f";
	sdl_modf :: fn (x: f64, y: f64&) -> f64 = extern "SDL_modf";
	sdl_modff :: fn (x: f32, y: f32&) -> f32 = extern "SDL_modff";
	sdl_pow :: fn (x: f64, y: f64) -> f64 = extern "SDL_pow";
	sdl_powf :: fn (x: f32, y: f32) -> f32 = extern "SDL_powf";
	sdl_round :: fn (x: f64) -> f64 = extern "SDL_round";
	sdl_roundf :: fn (x: f32) -> f32 = extern "SDL_roundf";
	sdl_lround :: fn (x: f64) -> c_long = extern "SDL_lround";
	sdl_lroundf :: fn (x: f32) -> c_long = extern "SDL_lroundf";
	sdl_scalbn :: fn (x: f64, n: c_int) -> f64 = extern "SDL_scalbn";
	sdl_scalbnf :: fn (x: f32, n: c_int) -> f32 = extern "SDL_scalbnf";
	sdl_sin :: fn (x: f64) -> f64 = extern "SDL_sin";
	sdl_sinf :: fn (x: f32) -> f32 = extern "SDL_sinf";
	sdl_sqrt :: fn (x: f64) -> f64 = extern "SDL_sqrt";
	sdl_sqrtf :: fn (x: f32) -> f32 = extern "SDL_sqrtf";
	sdl_tan :: fn (x: f64) -> f64 = extern "SDL_tan";
	sdl_tanf :: fn (x: f32) -> f32 = extern "SDL_tanf";
	//sdl_iconv_open :: fn (tocode: c_char&, fromcode: c_char&) -> sdl_iconv_t = extern "SDL_iconv_open";
	//sdl_iconv_close :: fn (cd: sdl_iconv_t) -> c_int = extern "SDL_iconv_close";
	//sdl_iconv :: fn (cd: sdl_iconv_t, inbuf: c_char&&, inbytesleft: usize&, outbuf: c_char&&, outbytesleft: usize&) -> usize = extern "SDL_iconv";
	//sdl_iconv_string :: fn (tocode: c_char&, fromcode: c_char&, inbuf: c_char&, inbytesleft: usize) -> c_char& = extern "SDL_iconv_string";
	//strlcpy :: fn (dst: c_char&, src: c_char&, size: usize) -> usize = extern "strlcpy";
	//strlcat :: fn (dst: c_char&, src: c_char&, size: usize) -> usize = extern "strlcat";
	//wcslcpy :: fn (dst: wchar_t&, src: wchar_t&, size: usize) -> usize = extern "wcslcpy";
	//wcslcat :: fn (dst: wchar_t&, src: wchar_t&, size: usize) -> usize = extern "wcslcat";
	sdl_size_mul_check_overflow :: fn (a: usize, b: usize, ret: usize&) -> bool = extern "SDL_size_mul_check_overflow";
	sdl_size_add_check_overflow :: fn (a: usize, b: usize, ret: usize&) -> bool = extern "SDL_size_add_check_overflow";
	sdl_time :: type_alias = s64;
	sdl_function_pointer :: type_alias = void;
	sdl_malloc_func_fn :: type_alias = fn (size: usize) -> void&;
	sdl_calloc_func_fn :: type_alias = fn (nmemb: usize, size: usize) -> void&;
	sdl_realloc_func_fn :: type_alias = fn (mem: void&, size: usize) -> void&;
	sdl_free_func_fn :: type_alias = fn (mem: void&);
	sdl_compare_callback_fn :: type_alias = fn (a: void&, b: void&) -> c_int;
	sdl_compare_callback_r_fn :: type_alias = fn (userdata: void&, a: void&, b: void&) -> c_int;
	sdl_function_pointer_fn :: type_alias = fn ();
	sdl_environment :: type_opaque;
	sdl_iconv_data_t :: type_opaque;

    SDL_FLT_EPSILON :: define f32 = 1.1920928955078125;
}