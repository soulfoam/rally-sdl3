export_library
{
	sdl_gpu_supports_shader_formats                 :: fn (format_flags: sdl_gpu_shader_format, name: c_char&) -> bool = extern "SDL_GPUSupportsShaderFormats";
	sdl_gpu_supports_properties                     :: fn (props: sdl_properties_id) -> bool = extern "SDL_GPUSupportsProperties";
	sdl_create_gpu_device                           :: fn (format_flags: sdl_gpu_shader_format, debug_mode: bool, name: c_char&) -> sdl_gpu_device& = extern "SDL_CreateGPUDevice";
	sdl_create_gpu_device_with_properties           :: fn (props: sdl_properties_id) -> sdl_gpu_device& = extern "SDL_CreateGPUDeviceWithProperties";
	sdl_destroy_gpu_device                          :: fn (device: sdl_gpu_device&) = extern "SDL_DestroyGPUDevice";
	sdl_get_num_gpu_drivers                         :: fn () -> c_int = extern "SDL_GetNumGPUDrivers";
	sdl_get_gpu_driver                              :: fn (index: c_int) -> c_char& = extern "SDL_GetGPUDriver";
	sdl_get_gpu_device_driver                       :: fn (device: sdl_gpu_device&) -> c_char& = extern "SDL_GetGPUDeviceDriver";
	sdl_get_gpu_shader_formats                      :: fn (device: sdl_gpu_device&) -> sdl_gpu_shader_format = extern "SDL_GetGPUShaderFormats";
	sdl_create_gpu_compute_pipeline                 :: fn (device: sdl_gpu_device&, createinfo: sdl_gpu_compute_pipeline_create_info&) -> sdl_gpu_compute_pipeline& = extern "SDL_CreateGPUComputePipeline";
	sdl_create_gpu_graphics_pipeline                :: fn (device: sdl_gpu_device&, createinfo: sdl_gpu_graphics_pipeline_create_info&) -> sdl_gpu_graphics_pipeline& = extern "SDL_CreateGPUGraphicsPipeline";
	sdl_create_gpu_sampler                          :: fn (device: sdl_gpu_device&, createinfo: sdl_gpu_sampler_create_info&) -> sdl_gpu_sampler& = extern "SDL_CreateGPUSampler";
	sdl_create_gpu_shader                           :: fn (device: sdl_gpu_device&, createinfo: sdl_gpu_shader_create_info&) -> sdl_gpu_shader& = extern "SDL_CreateGPUShader";
	sdl_create_gpu_texture                          :: fn (device: sdl_gpu_device&, createinfo: sdl_gpu_texture_create_info&) -> sdl_gpu_texture& = extern "SDL_CreateGPUTexture";
	sdl_create_gpu_buffer                           :: fn (device: sdl_gpu_device&, createinfo: sdl_gpu_buffer_create_info&) -> sdl_gpu_buffer& = extern "SDL_CreateGPUBuffer";
	sdl_create_gpu_transfer_buffer                  :: fn (device: sdl_gpu_device&, createinfo: sdl_gpu_transfer_buffer_create_info&) -> sdl_gpu_transfer_buffer& = extern "SDL_CreateGPUTransferBuffer";
	sdl_set_gpu_buffer_name                         :: fn (device: sdl_gpu_device&, buffer: sdl_gpu_buffer&, text: c_char&) = extern "SDL_SetGPUBufferName";
	sdl_set_gpu_texture_name                        :: fn (device: sdl_gpu_device&, texture: sdl_gpu_texture&, text: c_char&) = extern "SDL_SetGPUTextureName";
	sdl_insert_gpu_debug_label                      :: fn (command_buffer: sdl_gpu_command_buffer&, text: c_char&) = extern "SDL_InsertGPUDebugLabel";
	sdl_push_gpu_debug_group                        :: fn (command_buffer: sdl_gpu_command_buffer&, name: c_char&) = extern "SDL_PushGPUDebugGroup";
	sdl_pop_gpu_debug_group                         :: fn (command_buffer: sdl_gpu_command_buffer&) = extern "SDL_PopGPUDebugGroup";
	sdl_release_gpu_texture                         :: fn (device: sdl_gpu_device&, texture: sdl_gpu_texture&) = extern "SDL_ReleaseGPUTexture";
	sdl_release_gpu_sampler                         :: fn (device: sdl_gpu_device&, sampler: sdl_gpu_sampler&) = extern "SDL_ReleaseGPUSampler";
	sdl_release_gpu_buffer                          :: fn (device: sdl_gpu_device&, buffer: sdl_gpu_buffer&) = extern "SDL_ReleaseGPUBuffer";
	sdl_release_gpu_transfer_buffer                 :: fn (device: sdl_gpu_device&, transfer_buffer: sdl_gpu_transfer_buffer&) = extern "SDL_ReleaseGPUTransferBuffer";
	sdl_release_gpu_compute_pipeline                :: fn (device: sdl_gpu_device&, compute_pipeline: sdl_gpu_compute_pipeline&) = extern "SDL_ReleaseGPUComputePipeline";
	sdl_release_gpu_shader                          :: fn (device: sdl_gpu_device&, shader: sdl_gpu_shader&) = extern "SDL_ReleaseGPUShader";
	sdl_release_gpu_graphics_pipeline               :: fn (device: sdl_gpu_device&, graphics_pipeline: sdl_gpu_graphics_pipeline&) = extern "SDL_ReleaseGPUGraphicsPipeline";
	sdl_acquire_gpu_command_buffer                  :: fn (device: sdl_gpu_device&) -> sdl_gpu_command_buffer& = extern "SDL_AcquireGPUCommandBuffer";
	sdl_push_gpu_vertex_uniform_data                :: fn (command_buffer: sdl_gpu_command_buffer&, slot_index: u32, data: void&, length: u32) = extern "SDL_PushGPUVertexUniformData";
	sdl_push_gpu_fragment_uniform_data              :: fn (command_buffer: sdl_gpu_command_buffer&, slot_index: u32, data: void&, length: u32) = extern "SDL_PushGPUFragmentUniformData";
	sdl_push_gpu_compute_uniform_data               :: fn (command_buffer: sdl_gpu_command_buffer&, slot_index: u32, data: void&, length: u32) = extern "SDL_PushGPUComputeUniformData";
	sdl_begin_gpu_render_pass                       :: fn (command_buffer: sdl_gpu_command_buffer&, color_target_infos: sdl_gpu_color_target_info&, num_color_targets: u32, depth_stencil_target_info: sdl_gpu_depth_stencil_target_info&) -> sdl_gpu_render_pass& = extern "SDL_BeginGPURenderPass";
	sdl_bind_gpu_graphics_pipeline                  :: fn (render_pass: sdl_gpu_render_pass&, graphics_pipeline: sdl_gpu_graphics_pipeline&) = extern "SDL_BindGPUGraphicsPipeline";
	sdl_set_gpu_viewport                            :: fn (render_pass: sdl_gpu_render_pass&, viewport: sdl_gpu_viewport&) = extern "SDL_SetGPUViewport";
	sdl_set_gpu_scissor                             :: fn (render_pass: sdl_gpu_render_pass&, scissor: sdl_rect&) = extern "SDL_SetGPUScissor";
	sdl_set_gpu_blend_constants                     :: fn (render_pass: sdl_gpu_render_pass&, blend_ants: sdl_fcolor) = extern "SDL_SetGPUBlendConstants";
	sdl_set_gpu_stencil_reference                   :: fn (render_pass: sdl_gpu_render_pass&, reference: u8) = extern "SDL_SetGPUStencilReference";
	sdl_bind_gpu_vertex_buffers                     :: fn (render_pass: sdl_gpu_render_pass&, first_slot: u32, bindings: sdl_gpu_buffer_binding&, num_bindings: u32) = extern "SDL_BindGPUVertexBuffers";
	sdl_bind_gpu_index_buffer                       :: fn (render_pass: sdl_gpu_render_pass&, binding: sdl_gpu_buffer_binding&, index_element_size: sdl_gpu_index_element_size) = extern "SDL_BindGPUIndexBuffer";
	sdl_bind_gpu_vertex_samplers                    :: fn (render_pass: sdl_gpu_render_pass&, first_slot: u32, texture_sampler_bindings: sdl_gpu_texture_sampler_binding&, num_bindings: u32) = extern "SDL_BindGPUVertexSamplers";
	sdl_bind_gpu_vertex_storage_textures            :: fn (render_pass: sdl_gpu_render_pass&, first_slot: u32, storage_textures: sdl_gpu_texture&&, num_bindings: u32) = extern "SDL_BindGPUVertexStorageTextures";
	sdl_bind_gpu_vertex_storage_buffers             :: fn (render_pass: sdl_gpu_render_pass&, first_slot: u32, storage_buffers: sdl_gpu_buffer&&, num_bindings: u32) = extern "SDL_BindGPUVertexStorageBuffers";
	sdl_bind_gpu_fragment_samplers                  :: fn (render_pass: sdl_gpu_render_pass&, first_slot: u32, texture_sampler_bindings: sdl_gpu_texture_sampler_binding&, num_bindings: u32) = extern "SDL_BindGPUFragmentSamplers";
	sdl_bind_gpu_fragment_storage_textures          :: fn (render_pass: sdl_gpu_render_pass&, first_slot: u32, storage_textures: sdl_gpu_texture&&, num_bindings: u32) = extern "SDL_BindGPUFragmentStorageTextures";
	sdl_bind_gpu_fragment_storage_buffers           :: fn (render_pass: sdl_gpu_render_pass&, first_slot: u32, storage_buffers: sdl_gpu_buffer&&, num_bindings: u32) = extern "SDL_BindGPUFragmentStorageBuffers";
	sdl_draw_gpu_indexed_primitives                 :: fn (render_pass: sdl_gpu_render_pass&, num_indices: u32, num_instances: u32, first_index: u32, vertex_offset: s32, first_instance: u32) = extern "SDL_DrawGPUIndexedPrimitives";
	sdl_draw_gpu_primitives                         :: fn (render_pass: sdl_gpu_render_pass&, num_vertices: u32, num_instances: u32, first_vertex: u32, first_instance: u32) = extern "SDL_DrawGPUPrimitives";
	sdl_draw_gpu_primitives_indirect                :: fn (render_pass: sdl_gpu_render_pass&, buffer: sdl_gpu_buffer&, offset: u32, draw_count: u32) = extern "SDL_DrawGPUPrimitivesIndirect";
	sdl_draw_gpu_indexed_primitives_indirect        :: fn (render_pass: sdl_gpu_render_pass&, buffer: sdl_gpu_buffer&, offset: u32, draw_count: u32) = extern "SDL_DrawGPUIndexedPrimitivesIndirect";
	sdl_end_gpu_render_pass                         :: fn (render_pass: sdl_gpu_render_pass&) = extern "SDL_EndGPURenderPass";
	sdl_begin_gpu_compute_pass                      :: fn (command_buffer: sdl_gpu_command_buffer&, storage_texture_bindings: sdl_gpu_storage_texture_read_write_binding&, num_storage_texture_bindings: u32, storage_buffer_bindings: sdl_gpu_storage_buffer_read_write_binding&, num_storage_buffer_bindings: u32) -> sdl_gpu_compute_pass& = extern "SDL_BeginGPUComputePass";
	sdl_bind_gpu_compute_pipeline                   :: fn (compute_pass: sdl_gpu_compute_pass&, compute_pipeline: sdl_gpu_compute_pipeline&) = extern "SDL_BindGPUComputePipeline";
	sdl_bind_gpu_compute_samplers                   :: fn (compute_pass: sdl_gpu_compute_pass&, first_slot: u32, texture_sampler_bindings: sdl_gpu_texture_sampler_binding&, num_bindings: u32) = extern "SDL_BindGPUComputeSamplers";
	sdl_bind_gpu_compute_storage_textures           :: fn (compute_pass: sdl_gpu_compute_pass&, first_slot: u32, storage_textures: sdl_gpu_texture&&, num_bindings: u32) = extern "SDL_BindGPUComputeStorageTextures";
	sdl_bind_gpu_compute_storage_buffers            :: fn (compute_pass: sdl_gpu_compute_pass&, first_slot: u32, storage_buffers: sdl_gpu_buffer&&, num_bindings: u32) = extern "SDL_BindGPUComputeStorageBuffers";
	sdl_dispatch_gpu_compute                        :: fn (compute_pass: sdl_gpu_compute_pass&, groupcount_x: u32, groupcount_y: u32, groupcount_z: u32) = extern "SDL_DispatchGPUCompute";
	sdl_dispatch_gpu_compute_indirect               :: fn (compute_pass: sdl_gpu_compute_pass&, buffer: sdl_gpu_buffer&, offset: u32) = extern "SDL_DispatchGPUComputeIndirect";
	sdl_end_gpu_compute_pass                        :: fn (compute_pass: sdl_gpu_compute_pass&) = extern "SDL_EndGPUComputePass";
	sdl_map_gpu_transfer_buffer                     :: fn (device: sdl_gpu_device&, transfer_buffer: sdl_gpu_transfer_buffer&, cycle: bool) -> void& = extern "SDL_MapGPUTransferBuffer";
	sdl_unmap_gpu_transfer_buffer                   :: fn (device: sdl_gpu_device&, transfer_buffer: sdl_gpu_transfer_buffer&) = extern "SDL_UnmapGPUTransferBuffer";
	sdl_begin_gpu_copy_pass                         :: fn (command_buffer: sdl_gpu_command_buffer&) -> sdl_gpu_copy_pass& = extern "SDL_BeginGPUCopyPass";
	sdl_upload_to_gpu_texture                       :: fn (copy_pass: sdl_gpu_copy_pass&, source: sdl_gpu_texture_transfer_info&, destination: sdl_gpu_texture_region&, cycle: bool) = extern "SDL_UploadToGPUTexture";
	sdl_upload_to_gpu_buffer                        :: fn (copy_pass: sdl_gpu_copy_pass&, source: sdl_gpu_transfer_buffer_location&, destination: sdl_gpu_buffer_region&, cycle: bool) = extern "SDL_UploadToGPUBuffer";
	sdl_copy_gpu_texture_to_texture                 :: fn (copy_pass: sdl_gpu_copy_pass&, source: sdl_gpu_texture_location&, destination: sdl_gpu_texture_location&, w: u32, h: u32, d: u32, cycle: bool) = extern "SDL_CopyGPUTextureToTexture";
	sdl_copy_gpu_buffer_to_buffer                   :: fn (copy_pass: sdl_gpu_copy_pass&, source: sdl_gpu_buffer_location&, destination: sdl_gpu_buffer_location&, size: u32, cycle: bool) = extern "SDL_CopyGPUBufferToBuffer";
	sdl_download_from_gpu_texture                   :: fn (copy_pass: sdl_gpu_copy_pass&, source: sdl_gpu_texture_region&, destination: sdl_gpu_texture_transfer_info&) = extern "SDL_DownloadFromGPUTexture";
	sdl_download_from_gpu_buffer                    :: fn (copy_pass: sdl_gpu_copy_pass&, source: sdl_gpu_buffer_region&, destination: sdl_gpu_transfer_buffer_location&) = extern "SDL_DownloadFromGPUBuffer";
	sdl_end_gpu_copy_pass                           :: fn (copy_pass: sdl_gpu_copy_pass&) = extern "SDL_EndGPUCopyPass";
	sdl_generate_mipmaps_for_gpu_texture            :: fn (command_buffer: sdl_gpu_command_buffer&, texture: sdl_gpu_texture&) = extern "SDL_GenerateMipmapsForGPUTexture";
	sdl_blit_gpu_texture                            :: fn (command_buffer: sdl_gpu_command_buffer&, info: sdl_gpu_blit_info&) = extern "SDL_BlitGPUTexture";
	sdl_window_supports_gpu_swapchain_composition   :: fn (device: sdl_gpu_device&, window: sdl_window&, swapchain_composition: sdl_gpu_swapchain_composition) -> bool = extern "SDL_WindowSupportsGPUSwapchainComposition";
	sdl_window_supports_gpu_present_mode            :: fn (device: sdl_gpu_device&, window: sdl_window&, present_mode: sdl_gpu_present_mode) -> bool = extern "SDL_WindowSupportsGPUPresentMode";
	sdl_claim_window_for_gpu_device                 :: fn (device: sdl_gpu_device&, window: sdl_window&) -> bool = extern "SDL_ClaimWindowForGPUDevice";
	sdl_release_window_from_gpu_device              :: fn (device: sdl_gpu_device&, window: sdl_window&) = extern "SDL_ReleaseWindowFromGPUDevice";
	sdl_set_gpu_swapchain_parameters                :: fn (device: sdl_gpu_device&, window: sdl_window&, swapchain_composition: sdl_gpu_swapchain_composition, present_mode: sdl_gpu_present_mode) -> bool = extern "SDL_SetGPUSwapchainParameters";
	sdl_get_gpu_swapchain_texture_format            :: fn (device: sdl_gpu_device&, window: sdl_window&) -> sdl_gpu_texture_format = extern "SDL_GetGPUSwapchainTextureFormat";
	sdl_acquire_gpu_swapchain_texture               :: fn (command_buffer: sdl_gpu_command_buffer&, window: sdl_window&, swapchain_texture: sdl_gpu_texture&&, swapchain_texture_width: u32&, swapchain_texture_height: u32&) -> bool = extern "SDL_AcquireGPUSwapchainTexture";
	sdl_submit_gpu_command_buffer                   :: fn (command_buffer: sdl_gpu_command_buffer&) -> bool = extern "SDL_SubmitGPUCommandBuffer";
	sdl_submit_gpu_command_buffer_and_acquire_fence :: fn (command_buffer: sdl_gpu_command_buffer&) -> sdl_gpu_fence& = extern "SDL_SubmitGPUCommandBufferAndAcquireFence";
	sdl_wait_for_gpu_idle                           :: fn (device: sdl_gpu_device&) -> bool = extern "SDL_WaitForGPUIdle";
	sdl_wait_for_gpu_fences                         :: fn (device: sdl_gpu_device&, wait_all: bool, fences: sdl_gpu_fence&&, num_fences: u32) -> bool = extern "SDL_WaitForGPUFences";
	sdl_query_gpu_fence                             :: fn (device: sdl_gpu_device&, fence: sdl_gpu_fence&) -> bool = extern "SDL_QueryGPUFence";
	sdl_release_gpu_fence                           :: fn (device: sdl_gpu_device&, fence: sdl_gpu_fence&) = extern "SDL_ReleaseGPUFence";
	sdl_gpu_texture_format_texel_block_size         :: fn (format: sdl_gpu_texture_format) -> u32 = extern "SDL_GPUTextureFormatTexelBlockSize";
	sdl_gpu_texture_supports_format                 :: fn (device: sdl_gpu_device&, format: sdl_gpu_texture_format, type: sdl_gpu_texture_type, usage: sdl_gpu_texture_usage_flags) -> bool = extern "SDL_GPUTextureSupportsFormat";
	sdl_gpu_texture_supports_sample_count           :: fn (device: sdl_gpu_device&, format: sdl_gpu_texture_format, sample_count: sdl_gpu_sample_count) -> bool = extern "SDL_GPUTextureSupportsSampleCount";
	sdl_calculate_gpu_texture_format_size           :: fn (format: sdl_gpu_texture_format, width: u32, height: u32, depth_or_layer_count: u32) -> u32 = extern "SDL_CalculateGPUTextureFormatSize";
	sdl_gdk_suspend_gpu                             :: fn (device: sdl_gpu_device&) = extern "SDL_GDKSuspendGPU";
	sdl_gdk_resume_gpu                              :: fn (device: sdl_gpu_device&) = extern "SDL_GDKResumeGPU";

	sdl_gpu_device                :: type_opaque;
	sdl_gpu_buffer                :: type_opaque;
	sdl_gpu_transfer_buffer       :: type_opaque;
	sdl_gpu_texture               :: type_opaque;
	sdl_gpu_sampler               :: type_opaque;
	sdl_gpu_shader                :: type_opaque;
	sdl_gpu_compute_pipeline      :: type_opaque;
	sdl_gpu_graphics_pipeline     :: type_opaque;
	sdl_gpu_command_buffer        :: type_opaque;
	sdl_gpu_render_pass           :: type_opaque;
	sdl_gpu_compute_pass          :: type_opaque;
	sdl_gpu_copy_pass             :: type_opaque;
	sdl_gpu_fence                 :: type_opaque;

	sdl_gpu_viewport :: struct
	{
		x: f32;
		y: f32;
		w: f32;
		h: f32;
		min_depth: f32;
		max_depth: f32;
	}

	sdl_gpu_texture_transfer_info :: struct
	{
		transfer_buffer: sdl_gpu_transfer_buffer&;
		offset: u32;
		pixels_per_row: u32;
		rows_per_layer: u32;
	}

	sdl_gpu_transfer_buffer_location :: struct
	{
		transfer_buffer: sdl_gpu_transfer_buffer&;
		offset: u32;
	}

	sdl_gpu_texture_location :: struct
	{
		texture: sdl_gpu_texture&;
		mip_level: u32;
		layer: u32;
		x: u32;
		y: u32;
		z: u32;
	}

	sdl_gpu_texture_region :: struct
	{
		texture: sdl_gpu_texture&;
		mip_level: u32;
		layer: u32;
		x: u32;
		y: u32;
		z: u32;
		w: u32;
		h: u32;
		d: u32;
	}

	sdl_gpu_blit_region :: struct
	{
		texture: sdl_gpu_texture&;
		mip_level: u32;
		layer_or_depth_plane: u32;
		x: u32;
		y: u32;
		w: u32;
		h: u32;
	}

	sdl_gpu_buffer_location :: struct
	{
		buffer: sdl_gpu_buffer&;
		offset: u32;
	}

	sdl_gpu_buffer_region :: struct
	{
		buffer: sdl_gpu_buffer&;
		offset: u32;
		size: u32;
	}

	sdl_gpu_indirect_draw_command :: struct
	{
		num_vertices: u32;
		num_instances: u32;
		first_vertex: u32;
		first_instance: u32;
	}

	sdl_gpu_indexed_indirect_draw_command :: struct
	{
		num_indices: u32;
		num_instances: u32;
		first_index: u32;
		vertex_offset: s32;
		first_instance: u32;
	}

	sdl_gpu_indirect_dispatch_command :: struct
	{
		groupcount_x: u32;
		groupcount_y: u32;
		groupcount_z: u32;
	}

	sdl_gpu_sampler_create_info :: struct
	{
		min_filter: sdl_gpu_filter;
		mag_filter: sdl_gpu_filter;
		mipmap_mode: sdl_gpu_sampler_mipmap_mode;
		address_mode_u: sdl_gpu_sampler_address_mode;
		address_mode_v: sdl_gpu_sampler_address_mode;
		address_mode_w: sdl_gpu_sampler_address_mode;
		mip_lod_bias: f32;
		max_anisotropy: f32;
		compare_op: sdl_gpu_compare_op;
		min_lod: f32;
		max_lod: f32;
		enable_anisotropy: bool;
		enable_compare: bool;
		padding1: u8;
		padding2: u8;
		props: sdl_properties_id;
	}

	sdl_gpu_vertex_buffer_description :: struct
	{
		slot: u32;
		pitch: u32;
		input_rate: sdl_gpu_vertex_input_rate;
		instance_step_rate: u32;
	}

	sdl_gpu_vertex_attribute :: struct
	{
		location: u32;
		buffer_slot: u32;
		format: sdl_gpu_vertex_element_format;
		offset: u32;
	}

	sdl_gpu_vertex_input_state :: struct
	{
		vertex_buffer_descriptions: sdl_gpu_vertex_buffer_description&;
		num_vertex_buffers: u32;
		vertex_attributes: sdl_gpu_vertex_attribute&;
		num_vertex_attributes: u32;
	}

	sdl_gpu_stencil_op_state :: struct
	{
		fail_op: sdl_gpu_stencil_op;
		pass_op: sdl_gpu_stencil_op;
		depth_fail_op: sdl_gpu_stencil_op;
		compare_op: sdl_gpu_compare_op;
	}

	sdl_gpu_color_target_blend_state :: struct
	{
		src_color_blendfactor: sdl_gpu_blend_factor;
		dst_color_blendfactor: sdl_gpu_blend_factor;
		color_blend_op: sdl_gpu_blend_op;
		src_alpha_blendfactor: sdl_gpu_blend_factor;
		dst_alpha_blendfactor: sdl_gpu_blend_factor;
		alpha_blend_op: sdl_gpu_blend_op;
		color_write_mask: sdl_gpu_color_component_flags;
		enable_blend: bool;
		enable_color_write_mask: bool;
		padding1: u8;
		padding2: u8;
	}

	sdl_gpu_shader_create_info :: struct
	{
		code_size: usize;
		code: u8&;
		entrypoint: c_char&;
		format: sdl_gpu_shader_format;
		stage: sdl_gpu_shader_stage;
		num_samplers: u32;
		num_storage_textures: u32;
		num_storage_buffers: u32;
		num_uniform_buffers: u32;
		props: sdl_properties_id;
	}

	sdl_gpu_texture_create_info :: struct
	{
		type: sdl_gpu_texture_type;
		format: sdl_gpu_texture_format;
		usage: sdl_gpu_texture_usage_flags;
		width: u32;
		height: u32;
		layer_count_or_depth: u32;
		num_levels: u32;
		sample_count: sdl_gpu_sample_count;
		props: sdl_properties_id;
	}

	sdl_gpu_buffer_create_info :: struct
	{
		usage: sdl_gpu_buffer_usage_flags;
		size: u32;
		props: sdl_properties_id;
	}

	sdl_gpu_transfer_buffer_create_info :: struct
	{
		usage: sdl_gpu_transfer_buffer_usage;
		size: u32;
		props: sdl_properties_id;
	}

	sdl_gpu_rasterizer_state :: struct
	{
		fill_mode: sdl_gpu_fill_mode;
		cull_mode: sdl_gpu_cull_mode;
		front_face: sdl_gpu_front_face;
		depth_bias_ant_factor: f32;
		depth_bias_clamp: f32;
		depth_bias_slope_factor: f32;
		enable_depth_bias: bool;
		enable_depth_clip: bool;
		padding1: u8;
		padding2: u8;
	}

	sdl_gpu_multisample_state :: struct
	{
		sample_count: sdl_gpu_sample_count;
		sample_mask: u32;
		enable_mask: bool;
		padding1: u8;
		padding2: u8;
		padding3: u8;
	}

	sdl_gpu_depth_stencil_state :: struct
	{
		compare_op: sdl_gpu_compare_op;
		back_stencil_state: sdl_gpu_stencil_op_state;
		front_stencil_state: sdl_gpu_stencil_op_state;
		compare_mask: u8;
		write_mask: u8;
		enable_depth_test: bool;
		enable_depth_write: bool;
		enable_stencil_test: bool;
		padding1: u8;
		padding2: u8;
		padding3: u8;
	}

	sdl_gpu_color_target_description :: struct
	{
		format: sdl_gpu_texture_format;
		blend_state: sdl_gpu_color_target_blend_state;
	}

	sdl_gpu_graphics_pipeline_target_info :: struct
	{
		color_target_descriptions: sdl_gpu_color_target_description&;
		num_color_targets: u32;
		depth_stencil_format: sdl_gpu_texture_format;
		has_depth_stencil_target: bool;
		padding1: u8;
		padding2: u8;
		padding3: u8;
	}

	sdl_gpu_graphics_pipeline_create_info :: struct
	{
		vertex_shader: sdl_gpu_shader&;
		fragment_shader: sdl_gpu_shader&;
		vertex_input_state: sdl_gpu_vertex_input_state;
		primitive_type: sdl_gpu_primitive_type;
		rasterizer_state: sdl_gpu_rasterizer_state;
		multisample_state: sdl_gpu_multisample_state;
		depth_stencil_state: sdl_gpu_depth_stencil_state;
		target_info: sdl_gpu_graphics_pipeline_target_info;
		props: sdl_properties_id;
	}

	sdl_gpu_compute_pipeline_create_info :: struct
	{
		code_size: usize;
		code: u8&;
		entrypoint: c_char&;
		format: sdl_gpu_shader_format;
		num_samplers: u32;
		num_readonly_storage_textures: u32;
		num_readonly_storage_buffers: u32;
		num_readwrite_storage_textures: u32;
		num_readwrite_storage_buffers: u32;
		num_uniform_buffers: u32;
		threadcount_x: u32;
		threadcount_y: u32;
		threadcount_z: u32;
		props: sdl_properties_id;
	}

	sdl_gpu_color_target_info :: struct
	{
		texture: sdl_gpu_texture&;
		mip_level: u32;
		layer_or_depth_plane: u32;
		clear_color: sdl_fcolor;
		load_op: sdl_gpu_load_op;
		store_op: sdl_gpu_store_op;
		resolve_texture: sdl_gpu_texture&;
		resolve_mip_level: u32;
		resolve_layer: u32;
		cycle: bool;
		cycle_resolve_texture: bool;
		padding1: u8;
		padding2: u8;
	}

	sdl_gpu_depth_stencil_target_info :: struct
	{
		texture: sdl_gpu_texture&;
		clear_depth: f32;
		load_op: sdl_gpu_load_op;
		store_op: sdl_gpu_store_op;
		stencil_load_op: sdl_gpu_load_op;
		stencil_store_op: sdl_gpu_store_op;
		cycle: bool;
		clear_stencil: u8;
		padding1: u8;
		padding2: u8;
	}

	sdl_gpu_blit_info :: struct
	{
		source: sdl_gpu_blit_region;
		destination: sdl_gpu_blit_region;
		load_op: sdl_gpu_load_op;
		clear_color: sdl_fcolor;
		flip_mode: sdl_flip_mode;
		filter: sdl_gpu_filter;
		cycle: bool;
		padding1: u8;
		padding2: u8;
		padding3: u8;
	}

	sdl_gpu_buffer_binding :: struct
	{
		buffer: sdl_gpu_buffer&;
		offset: u32;
	}

	sdl_gpu_texture_sampler_binding :: struct
	{
		texture: sdl_gpu_texture&;
		sampler: sdl_gpu_sampler&;
	}

	sdl_gpu_storage_buffer_read_write_binding :: struct
	{
		buffer: sdl_gpu_buffer&;
		cycle: bool;
		padding1: u8;
		padding2: u8;
		padding3: u8;
	}

	sdl_gpu_storage_texture_read_write_binding :: struct
	{
		texture: sdl_gpu_texture&;
		mip_level: u32;
		layer: u32;
		cycle: bool;
		padding1: u8;
		padding2: u8;
		padding3: u8;
	}

	sdl_gpu_primitive_type :: enum c_int
	{
		SDL_GPU_PRIMITIVE_TYPE_TRIANGLE_LIST;
		SDL_GPU_PRIMITIVE_TYPE_TRIANGLE_STRIP;
		SDL_GPU_PRIMITIVE_TYPE_LINE_LIST;
		SDL_GPU_PRIMITIVE_TYPE_LINE_STRIP;
		SDL_GPU_PRIMITIVE_TYPE_POINT_LIST;
	}

	sdl_gpu_load_op :: enum c_int
	{
		SDL_GPU_LOAD_OP_LOAD;
		SDL_GPU_LOAD_OP_CLEAR;
		SDL_GPU_LOAD_OP_DONT_CARE;
	}

	sdl_gpu_store_op :: enum c_int
	{
		SDL_GPU_STORE_OP_STORE;
		SDL_GPU_STORE_OP_DONT_CARE;
		SDL_GPU_STORE_OP_RESOLVE;
		SDL_GPU_STORE_OP_RESOLVE_AND_STORE;
	}

	sdl_gpu_index_element_size :: enum c_int
	{
		SDL_GPU_INDEX_ELEMENT_SIZE_16BIT;
		SDL_GPU_INDEX_ELEMENT_SIZE_32BIT;
	}

	sdl_gpu_texture_format :: enum c_int
	{
		SDL_GPU_TEXTURE_FORMAT_INVALID;
		SDL_GPU_TEXTURE_FORMAT_A8_UNORM;
		SDL_GPU_TEXTURE_FORMAT_R8_UNORM;
		SDL_GPU_TEXTURE_FORMAT_R8G8_UNORM;
		SDL_GPU_TEXTURE_FORMAT_R8G8B8A8_UNORM;
		SDL_GPU_TEXTURE_FORMAT_R16_UNORM;
		SDL_GPU_TEXTURE_FORMAT_R16G16_UNORM;
		SDL_GPU_TEXTURE_FORMAT_R16G16B16A16_UNORM;
		SDL_GPU_TEXTURE_FORMAT_R10G10B10A2_UNORM;
		SDL_GPU_TEXTURE_FORMAT_B5G6R5_UNORM;
		SDL_GPU_TEXTURE_FORMAT_B5G5R5A1_UNORM;
		SDL_GPU_TEXTURE_FORMAT_B4G4R4A4_UNORM;
		SDL_GPU_TEXTURE_FORMAT_B8G8R8A8_UNORM;
		SDL_GPU_TEXTURE_FORMAT_BC1_RGBA_UNORM;
		SDL_GPU_TEXTURE_FORMAT_BC2_RGBA_UNORM;
		SDL_GPU_TEXTURE_FORMAT_BC3_RGBA_UNORM;
		SDL_GPU_TEXTURE_FORMAT_BC4_R_UNORM;
		SDL_GPU_TEXTURE_FORMAT_BC5_RG_UNORM;
		SDL_GPU_TEXTURE_FORMAT_BC7_RGBA_UNORM;
		SDL_GPU_TEXTURE_FORMAT_BC6H_RGB_FLOAT;
		SDL_GPU_TEXTURE_FORMAT_BC6H_RGB_UFLOAT;
		SDL_GPU_TEXTURE_FORMAT_R8_SNORM;
		SDL_GPU_TEXTURE_FORMAT_R8G8_SNORM;
		SDL_GPU_TEXTURE_FORMAT_R8G8B8A8_SNORM;
		SDL_GPU_TEXTURE_FORMAT_R16_SNORM;
		SDL_GPU_TEXTURE_FORMAT_R16G16_SNORM;
		SDL_GPU_TEXTURE_FORMAT_R16G16B16A16_SNORM;
		SDL_GPU_TEXTURE_FORMAT_R16_FLOAT;
		SDL_GPU_TEXTURE_FORMAT_R16G16_FLOAT;
		SDL_GPU_TEXTURE_FORMAT_R16G16B16A16_FLOAT;
		SDL_GPU_TEXTURE_FORMAT_R32_FLOAT;
		SDL_GPU_TEXTURE_FORMAT_R32G32_FLOAT;
		SDL_GPU_TEXTURE_FORMAT_R32G32B32A32_FLOAT;
		SDL_GPU_TEXTURE_FORMAT_R11G11B10_UFLOAT;
		SDL_GPU_TEXTURE_FORMAT_R8_UINT;
		SDL_GPU_TEXTURE_FORMAT_R8G8_UINT;
		SDL_GPU_TEXTURE_FORMAT_R8G8B8A8_UINT;
		SDL_GPU_TEXTURE_FORMAT_R16_UINT;
		SDL_GPU_TEXTURE_FORMAT_R16G16_UINT;
		SDL_GPU_TEXTURE_FORMAT_R16G16B16A16_UINT;
		SDL_GPU_TEXTURE_FORMAT_R32_UINT;
		SDL_GPU_TEXTURE_FORMAT_R32G32_UINT;
		SDL_GPU_TEXTURE_FORMAT_R32G32B32A32_UINT;
		SDL_GPU_TEXTURE_FORMAT_R8_INT;
		SDL_GPU_TEXTURE_FORMAT_R8G8_INT;
		SDL_GPU_TEXTURE_FORMAT_R8G8B8A8_INT;
		SDL_GPU_TEXTURE_FORMAT_R16_INT;
		SDL_GPU_TEXTURE_FORMAT_R16G16_INT;
		SDL_GPU_TEXTURE_FORMAT_R16G16B16A16_INT;
		SDL_GPU_TEXTURE_FORMAT_R32_INT;
		SDL_GPU_TEXTURE_FORMAT_R32G32_INT;
		SDL_GPU_TEXTURE_FORMAT_R32G32B32A32_INT;
		SDL_GPU_TEXTURE_FORMAT_R8G8B8A8_UNORM_SRGB;
		SDL_GPU_TEXTURE_FORMAT_B8G8R8A8_UNORM_SRGB;
		SDL_GPU_TEXTURE_FORMAT_BC1_RGBA_UNORM_SRGB;
		SDL_GPU_TEXTURE_FORMAT_BC2_RGBA_UNORM_SRGB;
		SDL_GPU_TEXTURE_FORMAT_BC3_RGBA_UNORM_SRGB;
		SDL_GPU_TEXTURE_FORMAT_BC7_RGBA_UNORM_SRGB;
		SDL_GPU_TEXTURE_FORMAT_D16_UNORM;
		SDL_GPU_TEXTURE_FORMAT_D24_UNORM;
		SDL_GPU_TEXTURE_FORMAT_D32_FLOAT;
		SDL_GPU_TEXTURE_FORMAT_D24_UNORM_S8_UINT;
		SDL_GPU_TEXTURE_FORMAT_D32_FLOAT_S8_UINT;
		SDL_GPU_TEXTURE_FORMAT_ASTC_4X4_UNORM;
		SDL_GPU_TEXTURE_FORMAT_ASTC_5X4_UNORM;
		SDL_GPU_TEXTURE_FORMAT_ASTC_5X5_UNORM;
		SDL_GPU_TEXTURE_FORMAT_ASTC_6X5_UNORM;
		SDL_GPU_TEXTURE_FORMAT_ASTC_6X6_UNORM;
		SDL_GPU_TEXTURE_FORMAT_ASTC_8X5_UNORM;
		SDL_GPU_TEXTURE_FORMAT_ASTC_8X6_UNORM;
		SDL_GPU_TEXTURE_FORMAT_ASTC_8X8_UNORM;
		SDL_GPU_TEXTURE_FORMAT_ASTC_10X5_UNORM;
		SDL_GPU_TEXTURE_FORMAT_ASTC_10X6_UNORM;
		SDL_GPU_TEXTURE_FORMAT_ASTC_10X8_UNORM;
		SDL_GPU_TEXTURE_FORMAT_ASTC_10X10_UNORM;
		SDL_GPU_TEXTURE_FORMAT_ASTC_12X10_UNORM;
		SDL_GPU_TEXTURE_FORMAT_ASTC_12X12_UNORM;
		SDL_GPU_TEXTURE_FORMAT_ASTC_4X4_UNORM_SRGB;
		SDL_GPU_TEXTURE_FORMAT_ASTC_5X4_UNORM_SRGB;
		SDL_GPU_TEXTURE_FORMAT_ASTC_5X5_UNORM_SRGB;
		SDL_GPU_TEXTURE_FORMAT_ASTC_6X5_UNORM_SRGB;
		SDL_GPU_TEXTURE_FORMAT_ASTC_6X6_UNORM_SRGB;
		SDL_GPU_TEXTURE_FORMAT_ASTC_8X5_UNORM_SRGB;
		SDL_GPU_TEXTURE_FORMAT_ASTC_8X6_UNORM_SRGB;
		SDL_GPU_TEXTURE_FORMAT_ASTC_8X8_UNORM_SRGB;
		SDL_GPU_TEXTURE_FORMAT_ASTC_10X5_UNORM_SRGB;
		SDL_GPU_TEXTURE_FORMAT_ASTC_10X6_UNORM_SRGB;
		SDL_GPU_TEXTURE_FORMAT_ASTC_10X8_UNORM_SRGB;
		SDL_GPU_TEXTURE_FORMAT_ASTC_10X10_UNORM_SRGB;
		SDL_GPU_TEXTURE_FORMAT_ASTC_12X10_UNORM_SRGB;
		SDL_GPU_TEXTURE_FORMAT_ASTC_12X12_UNORM_SRGB;
		SDL_GPU_TEXTURE_FORMAT_ASTC_4X4_FLOAT;
		SDL_GPU_TEXTURE_FORMAT_ASTC_5X4_FLOAT;
		SDL_GPU_TEXTURE_FORMAT_ASTC_5X5_FLOAT;
		SDL_GPU_TEXTURE_FORMAT_ASTC_6X5_FLOAT;
		SDL_GPU_TEXTURE_FORMAT_ASTC_6X6_FLOAT;
		SDL_GPU_TEXTURE_FORMAT_ASTC_8X5_FLOAT;
		SDL_GPU_TEXTURE_FORMAT_ASTC_8X6_FLOAT;
		SDL_GPU_TEXTURE_FORMAT_ASTC_8X8_FLOAT;
		SDL_GPU_TEXTURE_FORMAT_ASTC_10X5_FLOAT;
		SDL_GPU_TEXTURE_FORMAT_ASTC_10X6_FLOAT;
		SDL_GPU_TEXTURE_FORMAT_ASTC_10X8_FLOAT;
		SDL_GPU_TEXTURE_FORMAT_ASTC_10X10_FLOAT;
		SDL_GPU_TEXTURE_FORMAT_ASTC_12X10_FLOAT;
		SDL_GPU_TEXTURE_FORMAT_ASTC_12X12_FLOAT;
	}

	sdl_gpu_texture_type :: enum c_int
	{
		SDL_GPU_TEXTURE_TYPE_2D;
		SDL_GPU_TEXTURE_TYPE_2D_ARRAY;
		SDL_GPU_TEXTURE_TYPE_3D;
		SDL_GPU_TEXTURE_TYPE_CUBE;
		SDL_GPU_TEXTURE_TYPE_CUBE_ARRAY;
	}

	sdl_gpu_sample_count :: enum c_int
	{
		SDL_GPU_SAMPLE_COUNT_1;
		SDL_GPU_SAMPLE_COUNT_2;
		SDL_GPU_SAMPLE_COUNT_4;
		SDL_GPU_SAMPLE_COUNT_8;
	}

	sdl_gpu_cube_map_face :: enum c_int
	{
		SDL_GPU_CUBE_MAP_FACE_POSITIVE_X;
		SDL_GPU_CUBE_MAP_FACE_NEGATIVE_X;
		SDL_GPU_CUBE_MAP_FACE_POSITIVE_Y;
		SDL_GPU_CUBE_MAP_FACE_NEGATIVE_Y;
		SDL_GPU_CUBE_MAP_FACE_POSITIVE_Z;
		SDL_GPU_CUBE_MAP_FACE_NEGATIVE_Z;
	}

	sdl_gpu_transfer_buffer_usage :: enum c_int
	{
		SDL_GPU_TRANSFER_BUFFER_USAGE_UPLOAD;
		SDL_GPU_TRANSFER_BUFFER_USAGE_DOWNLOAD;
	}

	sdl_gpu_shader_stage :: enum c_int
	{
		SDL_GPU_SHADER_STAGE_VERTEX;
		SDL_GPU_SHADER_STAGE_FRAGMENT;
	}

	sdl_gpu_vertex_element_format :: enum c_int
	{
		SDL_GPU_VERTEX_ELEMENT_FORMAT_INVALID;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_INT;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_INT2;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_INT3;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_INT4;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_UINT;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_UINT2;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_UINT3;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_UINT4;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_FLOAT;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_FLOAT2;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_FLOAT3;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_FLOAT4;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_BYTE2;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_BYTE4;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_UBYTE2;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_UBYTE4;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_BYTE2_NORM;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_BYTE4_NORM;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_UBYTE2_NORM;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_UBYTE4_NORM;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_SHORT2;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_SHORT4;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_USHORT2;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_USHORT4;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_SHORT2_NORM;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_SHORT4_NORM;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_USHORT2_NORM;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_USHORT4_NORM;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_HALF2;
		SDL_GPU_VERTEX_ELEMENT_FORMAT_HALF4;
	}

	sdl_gpu_vertex_input_rate :: enum c_int
	{
		SDL_GPU_VERTEX_INPUT_RATE_VERTEX;
		SDL_GPU_VERTEX_INPUT_RATE_INSTANCE;
	}

	sdl_gpu_fill_mode :: enum c_int
	{
		SDL_GPU_FILL_MODE_FILL;
		SDL_GPU_FILL_MODE_LINE;
	}

	sdl_gpu_cull_mode :: enum c_int
	{
		SDL_GPU_CULL_MODE_NONE;
		SDL_GPU_CULL_MODE_FRONT;
		SDL_GPU_CULL_MODE_BACK;
	}

	sdl_gpu_front_face :: enum c_int
	{
		SDL_GPU_FRONT_FACE_COUNTER_CLOCKWISE;
		SDL_GPU_FRONT_FACE_CLOCKWISE;
	}

	sdl_gpu_compare_op :: enum c_int
	{
		SDL_GPU_COMPARE_OP_INVALID;
		SDL_GPU_COMPARE_OP_NEVER;
		SDL_GPU_COMPARE_OP_LESS;
		SDL_GPU_COMPARE_OP_EQUAL;
		SDL_GPU_COMPARE_OP_LESS_OR_EQUAL;
		SDL_GPU_COMPARE_OP_GREATER;
		SDL_GPU_COMPARE_OP_NOT_EQUAL;
		SDL_GPU_COMPARE_OP_GREATER_OR_EQUAL;
		SDL_GPU_COMPARE_OP_ALWAYS;
	}

	sdl_gpu_stencil_op :: enum c_int
	{
		SDL_GPU_STENCIL_OP_INVALID;
		SDL_GPU_STENCIL_OP_KEEP;
		SDL_GPU_STENCIL_OP_ZERO;
		SDL_GPU_STENCIL_OP_REPLACE;
		SDL_GPU_STENCIL_OP_INCREMENT_AND_CLAMP;
		SDL_GPU_STENCIL_OP_DECREMENT_AND_CLAMP;
		SDL_GPU_STENCIL_OP_INVERT;
		SDL_GPU_STENCIL_OP_INCREMENT_AND_WRAP;
		SDL_GPU_STENCIL_OP_DECREMENT_AND_WRAP;
	}

	sdl_gpu_blend_op :: enum c_int
	{
		SDL_GPU_BLEND_OP_INVALID;
		SDL_GPU_BLEND_OP_ADD;
		SDL_GPU_BLEND_OP_SUBTRACT;
		SDL_GPU_BLEND_OP_REVERSE_SUBTRACT;
		SDL_GPU_BLEND_OP_MIN;
		SDL_GPU_BLEND_OP_MAX;
	}

	sdl_gpu_blend_factor :: enum c_int
	{
		SDL_GPU_BLEND_FACTOR_INVALID;
		SDL_GPU_BLEND_FACTOR_ZERO;
		SDL_GPU_BLEND_FACTOR_ONE;
		SDL_GPU_BLEND_FACTOR_SRC_COLOR;
		SDL_GPU_BLEND_FACTOR_ONE_MINUS_SRC_COLOR;
		SDL_GPU_BLEND_FACTOR_DST_COLOR;
		SDL_GPU_BLEND_FACTOR_ONE_MINUS_DST_COLOR;
		SDL_GPU_BLEND_FACTOR_SRC_ALPHA;
		SDL_GPU_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;
		SDL_GPU_BLEND_FACTOR_DST_ALPHA;
		SDL_GPU_BLEND_FACTOR_ONE_MINUS_DST_ALPHA;
		SDL_GPU_BLEND_FACTOR_CONSTANT_COLOR;
		SDL_GPU_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR;
		SDL_GPU_BLEND_FACTOR_SRC_ALPHA_SATURATE;
	}

	sdl_gpu_filter :: enum c_int
	{
		SDL_GPU_FILTER_NEAREST;
		SDL_GPU_FILTER_LINEAR;
	}

	sdl_gpu_sampler_mipmap_mode :: enum c_int
	{
		SDL_GPU_SAMPLER_MIPMAP_MODE_NEAREST;
		SDL_GPU_SAMPLER_MIPMAP_MODE_LINEAR;
	}

	sdl_gpu_sampler_address_mode :: enum c_int
	{
		SDL_GPU_SAMPLER_ADDRESS_MODE_REPEAT;
		SDL_GPU_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT;
		SDL_GPU_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE;
	}

	sdl_gpu_present_mode :: enum c_int
	{
		SDL_GPU_PRESENT_MODE_VSYNC;
		SDL_GPU_PRESENT_MODE_IMMEDIATE;
		SDL_GPU_PRESENT_MODE_MAILBOX;
	}

	sdl_gpu_swapchain_composition :: enum c_int
	{
		SDL_GPU_SWAPCHAIN_COMPOSITION_SDR;
		SDL_GPU_SWAPCHAIN_COMPOSITION_SDR_LINEAR;
		SDL_GPU_SWAPCHAIN_COMPOSITION_HDR_EXTENDED_LINEAR;
		SDL_GPU_SWAPCHAIN_COMPOSITION_HDR10_ST2048;
	}

    sdl_gpu_color_component_flags :: type_alias = u8;
    SDL_GPU_COLOR_COMPONENT_R     :: define sdl_gpu_color_component_flags = 1 << 0;
    SDL_GPU_COLOR_COMPONENT_G     :: define sdl_gpu_color_component_flags = 1 << 1;
    SDL_GPU_COLOR_COMPONENT_B     :: define sdl_gpu_color_component_flags = 1 << 2;
    SDL_GPU_COLOR_COMPONENT_A     :: define sdl_gpu_color_component_flags = 1 << 3;

    sdl_gpu_texture_usage_flags                 :: type_alias = u32;
    SDL_GPU_TEXTURE_USAGE_SAMPLER               :: define sdl_gpu_texture_usage_flags = 1 << 0; 
    SDL_GPU_TEXTURE_USAGE_COLOR_TARGET          :: define sdl_gpu_texture_usage_flags = 1 << 1; 
    SDL_GPU_TEXTURE_USAGE_DEPTH_STENCIL_TARGET  :: define sdl_gpu_texture_usage_flags = 1 << 2; 
    SDL_GPU_TEXTURE_USAGE_GRAPHICS_STORAGE_READ :: define sdl_gpu_texture_usage_flags = 1 << 3; 
    SDL_GPU_TEXTURE_USAGE_COMPUTE_STORAGE_READ  :: define sdl_gpu_texture_usage_flags = 1 << 4; 
    SDL_GPU_TEXTURE_USAGE_COMPUTE_STORAGE_WRITE :: define sdl_gpu_texture_usage_flags = 1 << 5; 

    sdl_gpu_shader_format          :: type_alias = u32;
    SDL_GPU_SHADER_FORMAT_INVALID  :: define sdl_gpu_shader_format = 0;
    SDL_GPU_SHADER_FORMAT_PRIVATE  :: define sdl_gpu_shader_format = 1 << 0;
    SDL_GPU_SHADER_FORMAT_SPIRV    :: define sdl_gpu_shader_format = 1 << 1;
    SDL_GPU_SHADER_FORMAT_DXBC     :: define sdl_gpu_shader_format = 1 << 2;
    SDL_GPU_SHADER_FORMAT_DXIL     :: define sdl_gpu_shader_format = 1 << 3;
    SDL_GPU_SHADER_FORMAT_MSL      :: define sdl_gpu_shader_format = 1 << 4;
    SDL_GPU_SHADER_FORMAT_METALLIB :: define sdl_gpu_shader_format = 1 << 5;

    sdl_gpu_buffer_usage_flags                 :: type_alias = u32;
    SDL_GPU_BUFFER_USAGE_VERTEX                :: define sdl_gpu_buffer_usage_flags = 1 << 0;
    SDL_GPU_BUFFER_USAGE_INDEX                 :: define sdl_gpu_buffer_usage_flags = 1 << 1;
    SDL_GPU_BUFFER_USAGE_INDIRECT              :: define sdl_gpu_buffer_usage_flags = 1 << 2;
    SDL_GPU_BUFFER_USAGE_GRAPHICS_STORAGE_READ :: define sdl_gpu_buffer_usage_flags = 1 << 3;
    SDL_GPU_BUFFER_USAGE_COMPUTE_STORAGE_READ  :: define sdl_gpu_buffer_usage_flags = 1 << 4;
    SDL_GPU_BUFFER_USAGE_COMPUTE_STORAGE_WRITE :: define sdl_gpu_buffer_usage_flags = 1 << 5;


    SDL_PROP_GPU_CREATE_TEXTURE_D3D12_CLEAR_R_FLOAT       :: define string = "SDL.gpu.createtexture.d3d12.clear.r\0";
    SDL_PROP_GPU_CREATE_TEXTURE_D3D12_CLEAR_G_FLOAT       :: define string = "SDL.gpu.createtexture.d3d12.clear.g\0";
    SDL_PROP_GPU_CREATE_TEXTURE_D3D12_CLEAR_B_FLOAT       :: define string = "SDL.gpu.createtexture.d3d12.clear.b\0";
    SDL_PROP_GPU_CREATE_TEXTURE_D3D12_CLEAR_A_FLOAT       :: define string = "SDL.gpu.createtexture.d3d12.clear.a\0";
    SDL_PROP_GPU_CREATE_TEXTURE_D3D12_CLEAR_DEPTH_FLOAT   :: define string = "SDL.gpu.createtexture.d3d12.clear.depth\0";
    SDL_PROP_GPU_CREATE_TEXTURE_D3D12_CLEAR_STENCIL_UINT8 :: define string = "SDL.gpu.createtexture.d3d12.clear.stencil\0";


    SDL_PROP_GPU_DEVICE_CREATE_DEBUG_MODE_BOOL            :: define string = "SDL.gpu.device.create.debugmode\0";
    SDL_PROP_GPU_DEVICE_CREATE_PREFER_LOW_POWER_BOOL      :: define string = "SDL.gpu.device.create.preferlowpower\0";
    SDL_PROP_GPU_DEVICE_CREATE_NAME_STRING                :: define string = "SDL.gpu.device.create.name\0";
    SDL_PROP_GPU_DEVICE_CREATE_SHADERS_PRIVATE_BOOL       :: define string = "SDL.gpu.device.create.shaders.private\0";
    SDL_PROP_GPU_DEVICE_CREATE_SHADERS_SPIRV_BOOL         :: define string = "SDL.gpu.device.create.shaders.spirv\0";
    SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXBC_BOOL          :: define string = "SDL.gpu.device.create.shaders.dxbc\0";
    SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXIL_BOOL          :: define string = "SDL.gpu.device.create.shaders.dxil\0";
    SDL_PROP_GPU_DEVICE_CREATE_SHADERS_MSL_BOOL           :: define string = "SDL.gpu.device.create.shaders.msl\0";
    SDL_PROP_GPU_DEVICE_CREATE_SHADERS_METALLIB_BOOL      :: define string = "SDL.gpu.device.create.shaders.metallib\0";
    SDL_PROP_GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME_STRING :: define string = "SDL.gpu.device.create.d3d12.semantic\0";
}

import
{
    "sdl3/sdl_properties";
    "sdl3/sdl_rect";
    "sdl3/sdl_video";
    "sdl3/sdl_pixels";
    "sdl3/sdl_surface";
}