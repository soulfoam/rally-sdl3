export_library
{
    sdl_get_pixel_format_name      :: fn (format: sdl_pixel_format) -> c_char& = extern "SDL_GetPixelFormatName";
    sdl_get_masks_for_pixel_format :: fn (format: sdl_pixel_format, bpp: c_int&, rmask: u32&, gmask: u32&, bmask: u32&, amask: u32&) -> bool = extern "SDL_GetMasksForPixelFormat";
    sdl_get_pixel_format_for_masks :: fn (bpp: c_int, rmask: u32, gmask: u32, bmask: u32, amask: u32) -> sdl_pixel_format = extern "SDL_GetPixelFormatForMasks";
    sdl_get_pixel_format_details   :: fn (format: sdl_pixel_format) -> sdl_pixel_format_details& = extern "SDL_GetPixelFormatDetails";
    sdl_create_palette             :: fn (ncolors: c_int) -> sdl_palette& = extern "SDL_CreatePalette";
    sdl_set_palette_colors         :: fn (palette: sdl_palette&, colors: sdl_color&, firstcolor: c_int, ncolors: c_int) -> bool = extern "SDL_SetPaletteColors";
    sdl_destroy_palette            :: fn (palette: sdl_palette&) = extern "SDL_DestroyPalette";
    sdl_map_rgb                    :: fn (format: sdl_pixel_format_details&, palette: sdl_palette&, r: u8, g: u8, b: u8) -> u32 = extern "SDL_MapRGB";
    sdl_map_rgba                   :: fn (format: sdl_pixel_format_details&, palette: sdl_palette&, r: u8, g: u8, b: u8, a: u8) -> u32 = extern "SDL_MapRGBA";
    sdl_get_rgb                    :: fn (pixel: u32, format: sdl_pixel_format_details&, palette: sdl_palette&, r: u8&, g: u8&, b: u8&) = extern "SDL_GetRGB";
    sdl_get_rgba                   :: fn (pixel: u32, format: sdl_pixel_format_details&, palette: sdl_palette&, r: u8&, g: u8&, b: u8&, a: u8&) = extern "SDL_GetRGBA";

    SDL_ALPHA_OPAQUE            :: define u8 = 255;
    SDL_ALPHA_OPAQUE_FLOAT      :: define f32 = 1.0f;
    SDL_ALPHA_TRANSPARENT       :: define u8 = 0;
    SDL_ALPHA_TRANSPARENT_FLOAT :: define f32 = 0.0f;

    sdl_pixel_type :: enum c_int
    {
        SDL_PIXEL_TYPE_UNKNOWN;
        SDL_PIXEL_TYPE_INDEX1;
        SDL_PIXEL_TYPE_INDEX4;
        SDL_PIXEL_TYPE_INDEX8;
        SDL_PIXEL_TYPE_PACKED8;
        SDL_PIXEL_TYPE_PACKED16;
        SDL_PIXEL_TYPE_PACKED32;
        SDL_PIXEL_TYPE_ARRAYU8;
        SDL_PIXEL_TYPE_ARRAYU16;
        SDL_PIXEL_TYPE_ARRAYU32;
        SDL_PIXEL_TYPE_ARRAYF16;
        SDL_PIXEL_TYPE_ARRAYF32;
        SDL_PIXEL_TYPE_INDEX2;
    }

    sdl_bitmap_order :: enum c_int
    {
        SDL_BITMAP_ORDER_NONE;
        SDL_BITMAP_ORDER_4321;
        SDL_BITMAP_ORDER_1234;
    } 

    sdl_packed_order :: enum c_int
    {
        SDL_PACKED_ORDER_NONE;
        SDL_PACKED_ORDER_XRGB;
        SDL_PACKED_ORDER_RGBX;
        SDL_PACKED_ORDER_ARGB;
        SDL_PACKED_ORDER_RGBA;
        SDL_PACKED_ORDER_XBGR;
        SDL_PACKED_ORDER_BGRX;
        SDL_PACKED_ORDER_ABGR;
        SDL_PACKED_ORDER_BGRA;
    }

    sdl_array_order :: enum c_int
    {
        SDL_ARRAY_ORDER_NONE;
        SDL_ARRAY_ORDER_RGB;
        SDL_ARRAY_ORDER_RGBA;
        SDL_ARRAY_ORDER_ARGB;
        SDL_ARRAY_ORDER_BGR;
        SDL_ARRAY_ORDER_BGRA;
        SDL_ARRAY_ORDER_ABGR;
    } 

    sdl_packed_layout :: enum c_int
    {
        SDL_PACKED_LAYOUT_NONE;
        SDL_PACKED_LAYOUT_332;
        SDL_PACKED_LAYOUT_4444;
        SDL_PACKED_LAYOUT_1555;
        SDL_PACKED_LAYOUT_5551;
        SDL_PACKED_LAYOUT_565;
        SDL_PACKED_LAYOUT_8888;
        SDL_PACKED_LAYOUT_2101010;
        SDL_PACKED_LAYOUT_1010102;
    }

    sdl_pixel_format :: enum c_int
    {
        SDL_PIXEL_FORMAT_UNKNOWN = 0;
        SDL_PIXEL_FORMAT_INDEX1LSB = 0x11100100;
        SDL_PIXEL_FORMAT_INDEX1MSB = 0x11200100;
        SDL_PIXEL_FORMAT_INDEX2LSB = 0x1c100200;
        SDL_PIXEL_FORMAT_INDEX2MSB = 0x1c200200;
        SDL_PIXEL_FORMAT_INDEX4LSB = 0x12100400;
        SDL_PIXEL_FORMAT_INDEX4MSB = 0x12200400;
        SDL_PIXEL_FORMAT_INDEX8 = 0x13000801;
        SDL_PIXEL_FORMAT_RGB332 = 0x14110801;
        SDL_PIXEL_FORMAT_XRGB4444 = 0x15120c02;
        SDL_PIXEL_FORMAT_XBGR4444 = 0x15520c02;
        SDL_PIXEL_FORMAT_XRGB1555 = 0x15130f02;
        SDL_PIXEL_FORMAT_XBGR1555 = 0x15530f02;
        SDL_PIXEL_FORMAT_ARGB4444 = 0x15321002;
        SDL_PIXEL_FORMAT_RGBA4444 = 0x15421002;
        SDL_PIXEL_FORMAT_ABGR4444 = 0x15721002;
        SDL_PIXEL_FORMAT_BGRA4444 = 0x15821002;
        SDL_PIXEL_FORMAT_ARGB1555 = 0x15331002;
        SDL_PIXEL_FORMAT_RGBA5551 = 0x15441002;
        SDL_PIXEL_FORMAT_ABGR1555 = 0x15731002;
        SDL_PIXEL_FORMAT_BGRA5551 = 0x15841002;
        SDL_PIXEL_FORMAT_RGB565 = 0x15151002;
        SDL_PIXEL_FORMAT_BGR565 = 0x15551002;
        SDL_PIXEL_FORMAT_RGB24 = 0x17101803;
        SDL_PIXEL_FORMAT_BGR24 = 0x17401803;
        SDL_PIXEL_FORMAT_XRGB8888 = 0x16161804;
        SDL_PIXEL_FORMAT_RGBX8888 = 0x16261804;
        SDL_PIXEL_FORMAT_XBGR8888 = 0x16561804;
        SDL_PIXEL_FORMAT_BGRX8888 = 0x16661804;
        SDL_PIXEL_FORMAT_ARGB8888 = 0x16362004;
        SDL_PIXEL_FORMAT_RGBA8888 = 0x16462004;
        SDL_PIXEL_FORMAT_ABGR8888 = 0x16762004;
        SDL_PIXEL_FORMAT_BGRA8888 = 0x16862004;
        SDL_PIXEL_FORMAT_XRGB2101010 = 0x16172004;
        SDL_PIXEL_FORMAT_XBGR2101010 = 0x16572004;
        SDL_PIXEL_FORMAT_ARGB2101010 = 0x16372004;
        SDL_PIXEL_FORMAT_ABGR2101010 = 0x16772004;
        SDL_PIXEL_FORMAT_RGB48 = 0x18103006;
        SDL_PIXEL_FORMAT_BGR48 = 0x18403006;
        SDL_PIXEL_FORMAT_RGBA64 = 0x18204008;
        SDL_PIXEL_FORMAT_ARGB64 = 0x18304008;
        SDL_PIXEL_FORMAT_BGRA64 = 0x18504008;
        SDL_PIXEL_FORMAT_ABGR64 = 0x18604008;
        SDL_PIXEL_FORMAT_RGB48_FLOAT = 0x1a103006;
        SDL_PIXEL_FORMAT_BGR48_FLOAT = 0x1a403006;
        SDL_PIXEL_FORMAT_RGBA64_FLOAT = 0x1a204008;
        SDL_PIXEL_FORMAT_ARGB64_FLOAT = 0x1a304008;
        SDL_PIXEL_FORMAT_BGRA64_FLOAT = 0x1a504008;
        SDL_PIXEL_FORMAT_ABGR64_FLOAT = 0x1a604008;
        SDL_PIXEL_FORMAT_RGB96_FLOAT = 0x1b10600c;
        SDL_PIXEL_FORMAT_BGR96_FLOAT = 0x1b40600c;
        SDL_PIXEL_FORMAT_RGBA128_FLOAT = 0x1b208010;
        SDL_PIXEL_FORMAT_ARGB128_FLOAT = 0x1b308010;
        SDL_PIXEL_FORMAT_BGRA128_FLOAT = 0x1b508010;
        SDL_PIXEL_FORMAT_ABGR128_FLOAT = 0x1b608010;

        SDL_PIXEL_FORMAT_YV12 = 0x32315659;      
        SDL_PIXEL_FORMAT_IYUV = 0x56555949;      
        SDL_PIXEL_FORMAT_YUY2 = 0x32595559;      
        SDL_PIXEL_FORMAT_UYVY = 0x59565955;      
        SDL_PIXEL_FORMAT_YVYU = 0x55595659;      
        SDL_PIXEL_FORMAT_NV12 = 0x3231564e;      
        SDL_PIXEL_FORMAT_NV21 = 0x3132564e;      
        SDL_PIXEL_FORMAT_P010 = 0x30313050;      
        SDL_PIXEL_FORMAT_EXTERNAL_OES = 0x2053454f;

        #if ENDIAN_BIG
        SDL_PIXEL_FORMAT_RGBA32 = SDL_PIXEL_FORMAT_RGBA8888;
        SDL_PIXEL_FORMAT_ARGB32 = SDL_PIXEL_FORMAT_ARGB8888;
        SDL_PIXEL_FORMAT_BGRA32 = SDL_PIXEL_FORMAT_BGRA8888;
        SDL_PIXEL_FORMAT_ABGR32 = SDL_PIXEL_FORMAT_ABGR8888;
        SDL_PIXEL_FORMAT_RGBX32 = SDL_PIXEL_FORMAT_RGBX8888;
        SDL_PIXEL_FORMAT_XRGB32 = SDL_PIXEL_FORMAT_XRGB8888;
        SDL_PIXEL_FORMAT_BGRX32 = SDL_PIXEL_FORMAT_BGRX8888;
        SDL_PIXEL_FORMAT_XBGR32 = SDL_PIXEL_FORMAT_XBGR8888;
        #else
        SDL_PIXEL_FORMAT_RGBA32 = SDL_PIXEL_FORMAT_ABGR8888;
        SDL_PIXEL_FORMAT_ARGB32 = SDL_PIXEL_FORMAT_BGRA8888;
        SDL_PIXEL_FORMAT_BGRA32 = SDL_PIXEL_FORMAT_ARGB8888;
        SDL_PIXEL_FORMAT_ABGR32 = SDL_PIXEL_FORMAT_RGBA8888;
        SDL_PIXEL_FORMAT_RGBX32 = SDL_PIXEL_FORMAT_XBGR8888;
        SDL_PIXEL_FORMAT_XRGB32 = SDL_PIXEL_FORMAT_BGRX8888;
        SDL_PIXEL_FORMAT_BGRX32 = SDL_PIXEL_FORMAT_XRGB8888;
        SDL_PIXEL_FORMAT_XBGR32 = SDL_PIXEL_FORMAT_RGBX8888;
        #end
    }

    sdl_color_type :: enum c_int
    {
        SDL_COLOR_TYPE_UNKNOWN = 0;
        SDL_COLOR_TYPE_RGB = 1;
        SDL_COLOR_TYPE_YCBCR = 2;
    }

    sdl_color_range :: enum c_int
    {
        SDL_COLOR_RANGE_UNKNOWN = 0;
        SDL_COLOR_RANGE_LIMITED = 1;
        SDL_COLOR_RANGE_FULL = 2;
    }

    sdl_color_primaries :: enum c_int
    {
        SDL_COLOR_PRIMARIES_UNKNOWN = 0;
        SDL_COLOR_PRIMARIES_BT709 = 1;
        SDL_COLOR_PRIMARIES_UNSPECIFIED = 2;
        SDL_COLOR_PRIMARIES_BT470M = 4;
        SDL_COLOR_PRIMARIES_BT470BG = 5;
        SDL_COLOR_PRIMARIES_BT601 = 6;
        SDL_COLOR_PRIMARIES_SMPTE240 = 7;
        SDL_COLOR_PRIMARIES_GENERIC_FILM = 8;
        SDL_COLOR_PRIMARIES_BT2020 = 9;
        SDL_COLOR_PRIMARIES_XYZ = 10;
        SDL_COLOR_PRIMARIES_SMPTE431 = 11;
        SDL_COLOR_PRIMARIES_SMPTE432 = 12;
        SDL_COLOR_PRIMARIES_EBU3213 = 22;
        SDL_COLOR_PRIMARIES_CUSTOM = 31;
    }

    sdl_transfer_characteristics :: enum c_int
    {
        SDL_TRANSFER_CHARACTERISTICS_UNKNOWN = 0;
        SDL_TRANSFER_CHARACTERISTICS_BT709 = 1;
        SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED = 2;
        SDL_TRANSFER_CHARACTERISTICS_GAMMA22 = 4;
        SDL_TRANSFER_CHARACTERISTICS_GAMMA28 = 5;
        SDL_TRANSFER_CHARACTERISTICS_BT601 = 6;
        SDL_TRANSFER_CHARACTERISTICS_SMPTE240 = 7;
        SDL_TRANSFER_CHARACTERISTICS_LINEAR = 8;
        SDL_TRANSFER_CHARACTERISTICS_LOG100 = 9;
        SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10 = 10;
        SDL_TRANSFER_CHARACTERISTICS_IEC61966 = 11;
        SDL_TRANSFER_CHARACTERISTICS_BT1361 = 12;
        SDL_TRANSFER_CHARACTERISTICS_SRGB = 13;
        SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT = 14;
        SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT = 15;
        SDL_TRANSFER_CHARACTERISTICS_PQ = 16;
        SDL_TRANSFER_CHARACTERISTICS_SMPTE428 = 17;
        SDL_TRANSFER_CHARACTERISTICS_HLG = 18;
        SDL_TRANSFER_CHARACTERISTICS_CUSTOM = 31;
    }


    sdl_matrix_coefficients :: enum c_int
    {
        SDL_MATRIX_COEFFICIENTS_IDENTITY           = 0;
        SDL_MATRIX_COEFFICIENTS_BT709              = 1;
        SDL_MATRIX_COEFFICIENTS_UNSPECIFIED        = 2;
        SDL_MATRIX_COEFFICIENTS_FCC                = 4;
        SDL_MATRIX_COEFFICIENTS_BT470BG            = 5;
        SDL_MATRIX_COEFFICIENTS_BT601              = 6;
        SDL_MATRIX_COEFFICIENTS_SMPTE240           = 7;
        SDL_MATRIX_COEFFICIENTS_YCGCO              = 8;
        SDL_MATRIX_COEFFICIENTS_BT2020_NCL         = 9;
        SDL_MATRIX_COEFFICIENTS_BT2020_CL          = 10;
        SDL_MATRIX_COEFFICIENTS_SMPTE2085          = 11;
        SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL = 12;
        SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL  = 13;
        SDL_MATRIX_COEFFICIENTS_ICTCP              = 14;
        SDL_MATRIX_COEFFICIENTS_CUSTOM             = 31;
    }


    sdl_chroma_location :: enum c_int
    {
        SDL_CHROMA_LOCATION_NONE;
        SDL_CHROMA_LOCATION_LEFT;
        SDL_CHROMA_LOCATION_CENTER;
        SDL_CHROMA_LOCATION_TOPLEFT;
    }


    sdl_colorspace :: enum c_int
    {
        SDL_COLORSPACE_UNKNOWN;
        SDL_COLORSPACE_SRGB;
        SDL_COLORSPACE_SRGB_LINEAR;
        SDL_COLORSPACE_HDR10;
        SDL_COLORSPACE_JPEG;
        SDL_COLORSPACE_BT601_LIMITED;
        SDL_COLORSPACE_BT601_FULL;
        SDL_COLORSPACE_BT709_LIMITED;
        SDL_COLORSPACE_BT709_FULL;
        SDL_COLORSPACE_BT2020_LIMITED;
        SDL_COLORSPACE_BT2020_FULL;
    }

    SDL_COLORSPACE_RGB_DEFAULT :: define u32 = SDL_COLORSPACE_SRGB;
    SDL_COLORSPACE_YUV_DEFAULT :: define u32 = SDL_COLORSPACE_JPEG;

    sdl_color :: struct
    {
        r : u8;
        g : u8;
        b : u8;
        a : u8;
    }

    sdl_fcolor :: struct
    {
        r : f32;
        g : f32;
        b : f32;
        a : f32;
    }

    sdl_palette :: struct
    {
        ncolors  : c_int;
        colors   : sdl_color&;
        version  : u32;
        refcount : c_int;
    }

    sdl_pixel_format_details :: struct
    {
        format          : sdl_pixel_format;
        bits_per_pixel  : u8;
        bytes_per_pixel : u8;
        padding         : u8[2];
        rmask           : u32;
        gmask           : u32;
        bmask           : u32;
        amask           : u32;
        rbits           : u8;
        gbits           : u8;
        bbits           : u8;
        abits           : u8;
        rshift          : u8;
        gshift          : u8;
        bshift          : u8;
        ashift          : u8;
    }

    // macros
    sdl_define_pixel_format              :: fn (type: u32, order: u32, layout: u32, bits: u32, bytes: u32) -> u32;
    sdl_pixel_flag                       :: fn (x: u32) -> u32;
    sdl_pixeltype                        :: fn (x: u32) -> u32;
    sdl_pixel_order                      :: fn (x: u32) -> u32;
    sdl_pixel_layout                     :: fn (x: u32) -> u32;
    sdl_bits_per_pixel                   :: fn (x: u32) -> u32;
    sdl_bytes_per_pixel                  :: fn (x: u32) -> u32;
    sdl_is_pixel_format_indexed          :: fn (format: u32) -> bool;
    sdl_is_pixel_format_packed           :: fn (format: u32) -> bool;
    sdl_is_pixel_format_array            :: fn (format: u32) -> bool;
    sdl_is_pixel_format_alpha            :: fn (format: u32) -> bool;
    sdl_is_pixel_format_10bit            :: fn (format: u32) -> bool;
    sdl_is_pixel_format_float            :: fn (format: u32) -> bool;
    sdl_is_pixel_format_fourcc           :: fn (format: u32) -> bool;

    sdl_define_colorspace               :: fn (type: u32, range: u32, primaries: u32, transfer: u32, matrix: u32, chroma: u32) -> u32;
    sdl_colorspace_type                 :: fn (x: u32) -> sdl_color_type;
    sdl_colorspace_range                :: fn (x: u32) -> sdl_color_range;
    sdl_colorspace_chroma               :: fn (x: u32) -> sdl_chroma_location;
    sdl_colorspace_primaries            :: fn (x: u32) -> sdl_color_primaries;
    sdl_colorspace_transfer             :: fn (x: u32) -> sdl_transfer_characteristics;
    sdl_colorspace_matrix               :: fn (x: u32) -> sdl_matrix_coefficients;
    sdl_is_colorspace_matrix_bt601      :: fn (x: u32) -> bool;
    sdl_is_colorspace_matrix_bt709      :: fn (x: u32) -> bool;
    sdl_is_colorspace_matrix_bt2020_ncl :: fn (x: u32) -> bool;
    sdl_is_colorspace_limited_range     :: fn (x: u32) -> bool;
    sdl_is_colorspace_full_range        :: fn (x: u32) -> bool;

}

sdl_define_pixel_format :: fn (type: u32, order: u32, layout: u32, bits: u32, bytes: u32) -> u32
{
    return ((1 << 28) | ((type << 24) | (order << 20) | (layout << 16) | (bits << 8) | (bytes << 0)));
}

sdl_pixel_flag :: fn (x: u32) -> u32
{
    return ((x >> 28) & 0x0F);
}

sdl_pixeltype :: fn (x: u32) -> u32
{
    return ((x >> 24) & 0x0F);
}

sdl_pixel_order :: fn (x: u32) -> u32
{
    return ((x >> 20) & 0x0F);
}

sdl_pixel_layout :: fn (x: u32) -> u32
{
    return ((x >> 16) & 0x0F);
}

sdl_bits_per_pixel :: fn (x: u32) -> u32
{
    if (sdl_is_pixel_format_fourcc(x)) 
    {
        return 0;
    } 
    else 
    {
        return ((x >> 8) & 0xFF);
    }
}

sdl_bytes_per_pixel :: fn (x: u32) -> u32
{
    if (sdl_is_pixel_format_fourcc(x)) 
    {
        if (((x == SDL_PIXEL_FORMAT_YUY2) || 
            (x == SDL_PIXEL_FORMAT_UYVY) || 
            (x == SDL_PIXEL_FORMAT_YVYU) || 
            (x == SDL_PIXEL_FORMAT_P010))) 
        {
            return 2;
        } 
        else 
        {
            return 1;
        }
    } 

    return ((x >> 0) & 0xFF);
}

sdl_is_pixel_format_indexed :: fn (format: u32) -> bool
{
    return (!sdl_is_pixel_format_fourcc(format) && 
           ((sdl_pixeltype(format) == SDL_PIXEL_TYPE_INDEX1) || 
            (sdl_pixeltype(format) == SDL_PIXEL_TYPE_INDEX2) || 
            (sdl_pixeltype(format) == SDL_PIXEL_TYPE_INDEX4) || 
            (sdl_pixeltype(format) == SDL_PIXEL_TYPE_INDEX8)));
}

sdl_is_pixel_format_packed :: fn (format: u32) -> bool
{
    return (!sdl_is_pixel_format_fourcc(format) && 
           ((sdl_pixeltype(format) == SDL_PIXEL_TYPE_PACKED8) || 
            (sdl_pixeltype(format) == SDL_PIXEL_TYPE_PACKED16) || 
            (sdl_pixeltype(format) == SDL_PIXEL_TYPE_PACKED32)));
}

sdl_is_pixel_format_array :: fn (format: u32) -> bool
{
    return (!sdl_is_pixel_format_fourcc(format) && 
           ((sdl_pixeltype(format) == SDL_PIXEL_TYPE_ARRAYU8) || 
            (sdl_pixeltype(format) == SDL_PIXEL_TYPE_ARRAYU16) || 
            (sdl_pixeltype(format) == SDL_PIXEL_TYPE_ARRAYU32) || 
            (sdl_pixeltype(format) == SDL_PIXEL_TYPE_ARRAYF16) || 
            (sdl_pixeltype(format) == SDL_PIXEL_TYPE_ARRAYF32)));
}

sdl_is_pixel_format_alpha :: fn (format: u32) -> bool
{
    return ((sdl_is_pixel_format_packed(format) && 
            ((sdl_pixel_order(format) == SDL_PACKED_ORDER_ARGB) || 
             (sdl_pixel_order(format) == SDL_PACKED_ORDER_RGBA) || 
             (sdl_pixel_order(format) == SDL_PACKED_ORDER_ABGR) || 
             (sdl_pixel_order(format) == SDL_PACKED_ORDER_BGRA))));
}

sdl_is_pixel_format_10bit :: fn (format: u32) -> bool
{
    return (!sdl_is_pixel_format_fourcc(format) && 
           ((sdl_pixeltype(format) == SDL_PIXEL_TYPE_PACKED32) && 
            (sdl_pixel_layout(format) == SDL_PACKED_LAYOUT_2101010)));
}

sdl_is_pixel_format_float :: fn (format: u32) -> bool
{
    return (!sdl_is_pixel_format_fourcc(format) && 
           ((sdl_pixeltype(format) == SDL_PIXEL_TYPE_ARRAYF16) || 
            (sdl_pixeltype(format) == SDL_PIXEL_TYPE_ARRAYF32)));
}

sdl_is_pixel_format_fourcc :: fn (format: u32) -> bool
{
    return (format > 0 && (sdl_pixel_flag(format) != 1));
}

sdl_define_colorspace :: fn (type: u32, range: u32, primaries: u32, transfer: u32, matrix: u32, chroma: u32) -> u32
{
    return (((type << 28) | (range << 24) | (chroma << 20) | (primaries << 10) | (transfer << 5) | (matrix << 0)));
}

sdl_colorspace_type :: fn (x: u32) -> sdl_color_type
{
    return (((x >> 28) & 0x0F)) as sdl_color_type;
}

sdl_colorspace_range :: fn (x: u32) -> sdl_color_range
{
    return (((x >> 24) & 0x0F)) as sdl_color_range;
}

sdl_colorspace_chroma :: fn (x: u32) -> sdl_chroma_location
{
    return (((x >> 20) & 0x0F)) as sdl_chroma_location;
}

sdl_colorspace_primaries :: fn (x: u32) -> sdl_color_primaries
{
    return (((x >> 10) & 0x1F)) as sdl_color_primaries;
}

sdl_colorspace_transfer :: fn (x: u32) -> sdl_transfer_characteristics
{
    return (((x >> 5) & 0x1F)) as sdl_transfer_characteristics;
}

sdl_colorspace_matrix :: fn (x: u32) -> sdl_matrix_coefficients
{
    return (x & 0x1F) as sdl_matrix_coefficients;
}

sdl_is_colorspace_matrix_bt601 :: fn (x: u32) -> bool
{
    return sdl_colorspace_matrix(x) == SDL_MATRIX_COEFFICIENTS_BT601 || sdl_colorspace_matrix(x) == SDL_MATRIX_COEFFICIENTS_BT470BG;
}

sdl_is_colorspace_matrix_bt709 :: fn (x: u32) -> bool
{
    return sdl_colorspace_matrix(x) == SDL_MATRIX_COEFFICIENTS_BT709;
}

sdl_is_colorspace_matrix_bt2020_ncl :: fn (x: u32) -> bool
{
    return sdl_colorspace_matrix(x) == SDL_MATRIX_COEFFICIENTS_BT2020_NCL;
}

sdl_is_colorspace_limited_range :: fn (x: u32) -> bool
{
    return sdl_colorspace_range(x) != SDL_COLOR_RANGE_FULL;
}

sdl_is_colorspace_full_range :: fn (x: u32) -> bool
{
    return sdl_colorspace_range(x) == SDL_COLOR_RANGE_FULL;
}
